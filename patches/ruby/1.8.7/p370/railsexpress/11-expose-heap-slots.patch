diff --git a/gc.c b/gc.c
index 5b42b90..21b3f6b 100644
--- a/gc.c
+++ b/gc.c
@@ -690,6 +690,7 @@ static int heaps_used   = 0;
 
 static int heap_min_slots = 10000;
 static int heap_slots = 10000;
+static int heap_size = 0;
 
 static int heap_free_min = 4096;
 static int heap_slots_increment = 10000;
@@ -800,6 +801,21 @@ static void set_gc_parameters()
 
 /*
  *  call-seq:
+ *     GC.heap_slots    => Integer
+ *
+ *  Returns the number of heap slots available for object allocations.
+ *
+ *     GC.heap_slots    #=> 10000
+ *
+ */
+VALUE
+rb_gc_heap_slots()
+{
+    return INT2NUM(heap_size);
+}
+
+/*
+ *  call-seq:
  *     GC.dump    => nil
  *
  *  dumps information about the current GC data structures to the GC log file
@@ -967,6 +983,7 @@ add_heap()
         heaps[heaps_used].limit = heap_slots;
         break;
     }
+    heap_size += heap_slots;
     pend = p + heap_slots;
     if (lomem == 0 || lomem > p) lomem = p;
     if (himem < pend) himem = pend;
@@ -1828,6 +1845,7 @@ gc_sweep()
 	if (n == heaps[i].limit && freed > free_min) {
 	    RVALUE *pp;
 
+            heap_size -= n;
 	    heaps[i].limit = 0;
 	    for (pp = final_list; pp != final; pp = pp->as.free.next) {
 		pp->as.free.flags |= FL_SINGLETON; /* freeing page mark */
@@ -2866,6 +2884,7 @@ Init_GC()
     rb_define_singleton_method(rb_mGC, "clear_stats", rb_gc_clear_stats, 0);
     rb_define_singleton_method(rb_mGC, "allocated_size", rb_gc_allocated_size, 0);
     rb_define_singleton_method(rb_mGC, "num_allocations", rb_gc_num_allocations, 0);
+    rb_define_singleton_method(rb_mGC, "heap_slots", rb_gc_heap_slots, 0);
     rb_define_singleton_method(rb_mGC, "collections", rb_gc_collections, 0);
     rb_define_singleton_method(rb_mGC, "time", rb_gc_time, 0);
     rb_define_singleton_method(rb_mGC, "dump", rb_gc_dump, 0);
diff --git a/intern.h b/intern.h
index a87661d..e8f3209 100644
--- a/intern.h
+++ b/intern.h
@@ -274,6 +274,7 @@ void rb_gc_before_fork _((void));
 void rb_gc_after_fork _((void));
 VALUE rb_gc_allocated_size _((void));
 VALUE rb_gc_num_allocations _((void));
+VALUE rb_gc_heap_slots _((void));
 unsigned long rb_os_live_objects _((void));
 #ifdef HAVE_LONG_LONG
 unsigned LONG_LONG rb_os_allocated_objects _((void));
