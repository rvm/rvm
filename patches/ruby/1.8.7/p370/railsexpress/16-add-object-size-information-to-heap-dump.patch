diff --git a/gc.c b/gc.c
index 0ce7e68..53450bf 100644
--- a/gc.c
+++ b/gc.c
@@ -953,9 +953,21 @@ rb_gc_dump_file_and_line_info(int argc, VALUE *argv)
             if (!p->as.basic.klass) {
               fprintf(f, "__unknown__");
             } else {
-              fprintf(f, rb_obj_classname((VALUE)p));
+              fprintf(f, "%s", rb_obj_classname((VALUE)p));
             }
           }
+          /* print object size for some known object types */
+          switch (TYPE(p)) {
+          case T_STRING:
+            fprintf(f, ":%lu", RSTRING(p)->len);
+            break;
+          case T_ARRAY:
+            fprintf(f, ":%lu", RARRAY(p)->len);
+            break;
+          case T_HASH:
+            fprintf(f, ":%d", RHASH(p)->tbl->num_entries);
+            break;
+          }
         }
         fprintf(f, "\n");
       }
@@ -1924,10 +1936,10 @@ gc_sweep()
     heap_slots_live_after_last_gc = live;
 
     if (do_gc_stats) {
-        fprintf(gc_data_file, "objects processed: %.7d\n", live+freed);
-        fprintf(gc_data_file, "live objects     : %.7d\n", live);
-        fprintf(gc_data_file, "freelist objects : %.7d\n", freed - really_freed);
-        fprintf(gc_data_file, "freed objects    : %.7d\n", really_freed);
+        fprintf(gc_data_file, "objects processed: %.7lu\n", live+freed);
+        fprintf(gc_data_file, "live objects     : %.7lu\n", live);
+        fprintf(gc_data_file, "freelist objects : %.7lu\n", freed - really_freed);
+        fprintf(gc_data_file, "freed objects    : %.7lu\n", really_freed);
         for(i=0; i<256; i++) {
             if (free_counts[i]>0 || live_counts[i]>0) {
                 fprintf(gc_data_file,
@@ -2258,7 +2270,7 @@ garbage_collect()
         gc_time += musecs_used;
 
         if (verbose_gc_stats) {
-            fprintf(gc_data_file, "GC time: %d msec\n", musecs_used / 1000);
+            fprintf(gc_data_file, "GC time: %ld msec\n", (long)(musecs_used / 1000));
             fflush(gc_data_file);
         }
     }
