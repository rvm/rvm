diff --git a/gc.c b/gc.c
index 2c34932..0ce7e68 100644
--- a/gc.c
+++ b/gc.c
@@ -89,6 +89,7 @@ static unsigned long gc_num_allocations = 0;
 #endif
 static int gc_statistics = 0;

+static unsigned long heap_slots_live_after_last_gc = 0;

 static void run_final();
 static VALUE nomem_error;
@@ -465,6 +466,23 @@ rb_gc_time()
 #endif
 }

+/*
+ *  call-seq:
+ *     GC.heap_slots_live_after_last_gc    => Integer
+ *
+ *  Returns the number of heap slots which were live after the last garbage collection.
+ *
+ *     GC.heap_slots_live_after_last_gc    #=> 231223
+ *
+ */
+VALUE
+rb_gc_heap_slots_live_after_last_gc()
+{
+    return ULONG2NUM(heap_slots_live_after_last_gc);
+}
+
+
+
 VALUE rb_mGC;

 /*
@@ -1903,6 +1921,7 @@ gc_sweep()
     }
     during_gc = 0;
     live_objects = live;
+    heap_slots_live_after_last_gc = live;

     if (do_gc_stats) {
         fprintf(gc_data_file, "objects processed: %.7d\n", live+freed);
@@ -2924,6 +2943,7 @@ Init_GC()
     rb_define_singleton_method(rb_mGC, "allocated_size", rb_gc_allocated_size, 0);
     rb_define_singleton_method(rb_mGC, "num_allocations", rb_gc_num_allocations, 0);
     rb_define_singleton_method(rb_mGC, "heap_slots", rb_gc_heap_slots, 0);
+    rb_define_singleton_method(rb_mGC, "heap_slots_live_after_last_gc", rb_gc_heap_slots_live_after_last_gc, 0);
     rb_define_const(rb_mGC, "HEAP_SLOT_SIZE", INT2FIX(sizeof(RVALUE)));
     rb_define_singleton_method(rb_mGC, "collections", rb_gc_collections, 0);
     rb_define_singleton_method(rb_mGC, "time", rb_gc_time, 0);
