#!/usr/bin/env bash

# Base is a collection of general files + commonly included setup functions.

: rvm_trace_flag:${rvm_trace_flag:=0}
if (( rvm_trace_flag > 0 ))
then
  set -o xtrace
  # set -o errexit

  if [[ -z "${ZSH_VERSION:-}" ]]
  then
    #  set -o errtrace
    #  set -o pipefail

    export PS4
    PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
  fi

elif [[ ${rvm_debug_flag:-0} > 0 ]]
then
  rvm_debug_flag=0

fi

export __array_start rvm_path >/dev/null

#
# Setup environment parameters.
#
if [[ -n "${ZSH_VERSION:-}" ]]
then
  __array_start=1
else
  __array_start=0
fi

if (( ${rvm_ignore_rvmrc:=0} == 0 ))
then
  : rvm_stored_umask:${rvm_stored_umask:=$(umask)}
  for rvmrc in /etc/rvmrc "$HOME/.rvmrc"
  do
    if [[ -f "$rvmrc" ]]
    then
      if \grep '^\s*rvm .*$' "$rvmrc" >/dev/null 2>&1
      then
        printf "%b" "
Error:
        $rvmrc is for rvm settings only.
        rvm CLI may NOT be called from within $rvmrc.
        Skipping the loading of $rvmrc"
        return 1
      else
        source "$rvmrc"
      fi
    fi
  done
fi

export rvm_tar
export rvm_uname
rvm_uname=$(uname)
case "$rvm_uname" in
    OpenBSD)
        rvm_tar=gtar
        ;;
    *)
        rvm_tar=tar
        ;;
esac

export rvm_path
if [[ -z "${rvm_path:-}" ]]
then
  if (( UID == 0 )) && [[ -d "/usr/local/rvm" ]]
  then rvm_path="/usr/local/rvm"
  elif [[ -d "${HOME}/.rvm" ]]
  then rvm_path="${HOME}/.rvm"
  elif [[ -d "/usr/local/rvm" ]]
  then rvm_path="/usr/local/rvm"
  else echo "Can't find rvm install!" 1>&2 ; exit 1
  fi
fi

true ${rvm_scripts_path:="$rvm_path/scripts"}

# Initialize all main RVM variables.
source "$rvm_scripts_path/initialize"

# Load the general scripts.
# Use rvm_base_except="selector", for example, to override the loading.
case " ${rvm_base_except:-} " in
  (*[[:space:]]selector[[:space:]]*)
    true # do not load.
    ;;
  (*)
    source "$rvm_scripts_path/selector"
    ;;
esac

typeset -a scripts
scripts=(
  logging utility init cleanup env rvmrc install environment gemset db bundler
)
for entry in ${scripts[@]} ; do
  source "$rvm_scripts_path/functions/$entry"
done
unset scripts entry rvm_base_except

if [[ ! -t 0 ]] && builtin command -v __rvm_cleanup_tmp >/dev/null 2>&1
then
  # Cleanup RVM temporary files on exit if we are loaded from a script.
  # Only cleanup if the function to do so is defined :)
  trap "set +e; __rvm_cleanup_tmp '$$'" 0 1 2 3 15
fi
