#!/usr/bin/env bash

( # wrap color reseting
if ! typeset -f rvm_pretty_print >/dev/null 2>&1
then source "${rvm_scripts_path:-"$rvm_path/scripts"}/functions/logging"
fi
rvm_pretty_print stdout || unset rvm_error_clr rvm_warn_clr rvm_debug_clr rvm_notify_clr rvm_reset_clr

system="$(uname)"

if [[ "Linux" == "$system" ]] || [[ "$(uname|tr a-z A-Z)" =~ *BSD* ]]
then
  for file in /etc/*-release
  do
    release="( $(cat $file) )"
    break
  done
  printf "%b" "
Requirements for ${system} $release
"

  rvm_apt_binary="$(builtin command -v apt-get)"
  rvm_emerge_binary="$(builtin command -v emerge)"
  rvm_pacman_binary="$(builtin command -v pacman)"
  rvm_yum_binary="$(builtin command -v yum)"
  rvm_zypper_binary="$(builtin command -v zypper)"
  rvm_free_ram_mb="$(free -m | awk '{if (NR==3) print $4}')"

  printf "%b" "
NOTE: 'ruby' represents Matz's Ruby Interpreter (MRI) (1.8.X, 1.9.X)
             This is the *original* / standard Ruby Language Interpreter
      'ree'  represents Ruby Enterprise Edition
      'rbx'  represents Rubinius

bash >= 4.1 required
curl is required
git is required (>= 1.7 for ruby-head)
patch is required (for 1.8 rubies and some ruby-head's).

To install rbx and/or Ruby 1.9 head (MRI) (eg. 1.9.2-head),
then you must install and use rvm 1.8.7 first.
"

  if [[ ! -z "$rvm_apt_binary" ]]
  then
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: ${rvm_apt_binary} install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion

# For JRuby, install the following:
  jruby: ${rvm_apt_binary} install curl g++ openjdk-6-jre-headless
  jruby-head: ${rvm_apt_binary} install ant openjdk-6-jdk

# For IronRuby, install the following:
  ironruby: ${rvm_apt_binary} install curl mono-2.0-devel
"

  elif [[ ! -z "$rvm_emerge_binary" ]]
  then
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby|ruby-head: emerge libiconv readline zlib openssl curl git libyaml sqlite libxslt libtool gcc autoconf automake bison m4

# For JRuby, install the following:
  jruby: emerge dev-java/sun-jdk dev-java/sun-jre-bin

# For IronRuby, install the following:
  ironruby: emerge dev-lang/mono
    "

  elif [[ ! -z "$rvm_pacman_binary" ]]
  then
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: pacman -Sy --noconfirm gcc patch curl zlib readline libxml2 libxslt git autoconf automake diffutils make libtool bison subversion

# For JRuby, install the following:
  jruby: pacman -Sy --noconfirm jdk jre curl
  jruby-head: pacman -Sy apache-ant

# For IronRuby, install the following:
  ironruby: pacman -Sy --noconfirm mono
"

  elif [[ ! -z "$rvm_yum_binary" ]]
  then
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel ## NOTE: For centos >= 5.4 iconv-devel is provided by glibc

# For JRuby, install the following:
  jruby: yum install -y java
"

  elif [[ ! -z "$rvm_zypper_binary" ]]
  then
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: sudo zypper install -y patterns-openSUSE-devel_basis gcc-c++ bzip2 readline-devel zlib-devel
                           libxml2-devel libxslt-devel libyaml-devel libopenssl-devel libffi45-devel
                           libtool bison

# For JRuby, install the following:
  jruby: sudo zypper install -y java-1_6_0-sun # Non-Oss repository required
"

  else
    printf "%b" "
Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following with development headers:
  ruby: # gcc-c++ patch readline zlib libyaml iconv libxml2 libxslt libtool bison

# For JRuby, install the following:
  jruby: # The SUN java runtime environment and development kit.

# For IronRuby, install the following:
  ironruby: #The Mono Runtime and Development Platform (version 2.6 or greater is recommended).
"
  fi
elif [[ "SunOS" == "$system" ]]
then
  version="$(uname -v)"
  if [[ "11.0" == "$version" ]]
  then
    # looks like Solaris 11
    printf "%b" "
RVM requirements for Solaris 11:

# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: pkg install text/gnu-patch developer/gcc-45 developer/library/lint system/header \\
                    system/library/math/header-math file/gnu-coreutils

# For JRuby, install the following:
 jruby: # The Oracle java runtime environment and development kit.
"
  elif [[ "$version" =~ ^oi ]]
  then
    # looks like OpenIndiana
    printf "%b" "
RVM requirements for OpenIndiana

# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: pkg install text/gnu-patch runtime/gcc developer/library/lint system/header \\
                    system/library/math/header-math file/gnu-coreutils

# For JRuby, install the following:
 jruby: # The Oracle java runtime environment and development kit.
"
  else
    printf "%b" "
RVM requirements for unrecognised Solaris system.

# For Ruby / Ruby HEAD (MRI, Rubinius, & REE), install the following:
  ruby: you will need to install: gcc, gnu-patch, lint library, system header, system
        math header and gnu-coreutils.

        Check you package publisher(s) for installing these.

# For JRuby, install the following:
 jruby: # The Oracle java runtime environment and development kit.
"
  fi
elif [[ "$MACHTYPE" == *darwin* ]]
then

  if ! typeset -f __rvm_detect_xcode_version > /dev/null 2>&1
  then source $rvm_path/scripts/functions/utility
  fi

  release="$( sw_vers -productName )"
  version="$( sw_vers -productVersion )"
  xcode_version="$( __rvm_detect_xcode_version )"
  : ${xcode_version:=0}

  printf "%b" "
  Notes for ${release} ${version}"
  if __rvm_version_compare $xcode_version -eq 0
  then
    printf "%b" ", No Xcode.
"
  else
    printf "%b" ", Xcode $xcode_version.
"
  fi

  if __rvm_version_compare $xcode_version -ge 4.2
  then
    printf "%b" "
For MacRuby: Install LLVM first.
"
  fi
  printf "%b" "
For JRuby:  Install the JDK. See http://developer.apple.com/java/download/  # Current Java version \"1.6.0_26\"
For IronRuby: Install Mono >= 2.6
For Ruby 1.9.3: Install libksba # If using Homebrew, 'brew install libksba'

You can use & download osx-gcc-installer: https://github.com/kennethreitz/osx-gcc-installer
** NOTE: Currently, Node.js is having issues building with osx-gcc-installer. The only fix is to install Xcode over osx-gcc-installer.

We had reports of http://hpc.sourceforge.net/ making things work, but it looks like not easiest/safest to setup.

To use an RVM installed Ruby as default, instead of the system ruby:

    rvm install 1.8.7 # installs patch 357: closest supported version
    rvm system ; rvm gemset export system.gems ; rvm 1.8.7 ; rvm gemset import system.gems # migrate your gems
    rvm alias create default 1.8.7

And reopen your terminal windows.

${rvm_error_clr:-}Xcode 4.2${rvm_reset_clr:-}:
 * is only supported by ruby 1.9.3+
 * it breaks gems with native extensions, especially DB drivers.
"

  if __rvm_version_compare $version -ge 10.7
  then
    if __rvm_version_compare $xcode_version -gt 0 && __rvm_version_compare $xcode_version -lt 4.1
    then
      printf "%b" "
** Please note that Xcode 3.x will *not* work on OS X Lion. The 'cross-over' is Xcode 4.1.
** You can find Xcode 4.1 for OS X Lion at:
   https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_4.1_for_lion/xcode_4.1_for_lion.dmg
"
    fi
  elif __rvm_version_compare $version -ge 10.6
  then
    printf "%b" "
** Required Xcode Version 3.2.1 (1613) or later, such as 3.2.6 or Xcode 4.1.
   You should download the Xcode tools from developer.apple.com, since the Snow Leopard dvd install contained bugs.
"
  fi

  if __rvm_version_compare $xcode_version -ge 4.3
  then
    printf "%b" "
${rvm_error_clr:-}Xcode 4.3${rvm_reset_clr:-}+ users
- please be warned
- only ruby-1.9.3-p125+ is partially supported
- in case of any compilation issues:
 * downgrade to ${rvm_notify_clr:-}Xcode 4.1${rvm_error_clr:-}
 * uninstall Xcode and install ${rvm_notify_clr:-}osx-gcc-installer${rvm_reset_clr:-}
and reinstall your rubies.
"
  elif __rvm_version_compare $xcode_version -ge 4.2.1
  then
    printf "%b" "
${rvm_error_clr:-}Xcode 4.2.1${rvm_reset_clr:-}+ users - please be warned -
in case of any compilation issues
 * downgrade to ${rvm_notify_clr:-}Xcode 4.1${rvm_error_clr:-}
 * uninstall Xcode and install ${rvm_notify_clr:-}osx-gcc-installer${rvm_reset_clr:-}
and reinstall your rubies.
"
  elif __rvm_version_compare $xcode_version -ge 4.2
  then
    printf "%b" "
${rvm_error_clr:-}Xcode 4.2${rvm_reset_clr:-} users - please be warned -
in case of any compilation issues
 * downgrade to ${rvm_notify_clr:-}Xcode 4.1${rvm_reset_clr:-}
 * or install ${rvm_notify_clr:-}osx-gcc-installer${rvm_reset_clr:-}
and reinstall your rubies.
"
  fi

  if (( UID == 0 )) || [[ "$rvm_path" == "/usr/local/rvm" ]]
  then
    printf "%b" "
${rvm_notify_clr:-}RVM Group Membership Management${rvm_reset_clr:-} - With Multi-User installations, the RVM installer automatically
creates an 'rvm' group which, as the RVM documentation explains, administrators must add the users they wish
to let use the RVM installation to. The call is made in the installer as:

    ${rvm_notify_clr:-}sudo dscl . -create /Groups/\$rvm_group_name gid \$gid${rvm_reset_clr:-}

wherein RVM creates the gid by checking for the last assigned gid and adding 1. To physicially add a user to
the group, administrators must use:

    ${rvm_notify_clr:-}sudo dscl localhost -append /Local/Default/Groups/rvm GroupMembership \$user_name${rvm_notify_clr:-}

To check on group membership to the RVM group, administrators would execute the following:

    ${rvm_notify_clr:-}rvmsudo dscl localhost -read /Local/Default/Groups/rvm${rvm_reset_clr:-}

Pay attention to the GroupMembership and PrimaryGroupID lines. This tells you who is in it, and the GID for the RVM group.
Afterwards, should administrators wish to remove users from the group, they would execute:

    ${rvm_notify_clr:-}sudo dscl localhost -delete /Local/Default/Groups/rvm GroupMembership \$user_name${rvm_reset_clr:-}
    ${rvm_notify_clr:-}sudo dsmemberutil flushcache${rvm_reset_clr:-}

This will keep the 'rvm' group, but remove the listed user from it. They can directly delete the rvm group with:

    ${rvm_notify_clr:-}sudo dscl . -delete /Groups/rvm && sudo dsmemberutil flushcache${rvm_reset_clr:-}

without previously deleting users from the group, as well. This will completely remove the 'rvm' group from the system.
Please note, the call to 'dsmemberutil flushcache' is required on both removal of the user from the group, and/or
removal of the group directly because that membership is still cached locally until either reboot or sync with
Directory Services. Allowing the group membership to stay in the user's 'groups' output does not mean the user is
automatically re-added to the 'rvm' group should the group be subsequently be re-added. This means the user(s) end up
erroneously showing they are part of the 'rvm' group even though they actually are not, if the call to 'dsmemberutil'
is not made. By this we mean the 'groups' command will still show them a part of the 'rvm' group, even if the user
logs out and then back in, due to caching. This applies to Tiger, Leopard, Snow Leopard, and Lion. Previous versions of
the OS such as Cheetah/Puma, and Jaguar used 'nicl', a.k.a NetInfo, and not 'dscl'.
"
  fi
fi

printf "%b" "\n"

) # Finish color resetting block
