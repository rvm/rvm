#!/usr/bin/env bash

source "$rvm_scripts_path/base"

usage()
{
  echo "Usage: rvm tools {identifier,path-identifier,strings,user}" 1>&2
  exit 1
}

# Return the identifier that's current in use.
tools_identifier()
{
  __rvm_env_string
}

tools_path_identifier()
{
  if [[ -z "$1" || ! -d "$1" ]]; then
    echo "Usage: rvm tools path-identifier 'path-to-check'"
    return 1
  fi

  __rvm_cd "$1"
  __rvm_do_with_env_before
  rvm_promptless=1 __rvm_project_rvmrc >/dev/null 2>&1
  rvmrc_result="$?"
  __rvm_env_string
  __rvm_do_with_env_after
  exit $rvmrc_result
}

tools_strings()
{
  for ruby_name in "$@"; do
    __rvm_unset_ruby_variables
    rvm_ruby_string="$ruby_name"
    if { __rvm_ruby_string && __rvm_select; } >/dev/null 2>&1; then
      basename "$rvm_ruby_gem_home"
    else
      echo ""
    fi
  done
}

tools_user_usage()
{
  typeset msg

  for msg in "$@"
  do
    rvm_error "$msg"
  done

  rvm_error "Usage: rvm user [gemsets] [rubies] [hooks] [pkgs] [wrappers] [all] [--skel]"
}

tools_user_setup()
{
  typeset target name _user_path
  export eval_target
  target="$1"
  eval_target="${2}"
  name="rvm_${eval_target}_path"

  # detect name in config
  if [[ -f "${target}/.rvmrc" ]] && GREP_OPTIONS="" \grep "^export ${name}=" "${target}/.rvmrc" > /dev/null
  then
    # if defined read path
    _user_path="$( GREP_OPTIONS="" \grep "^export ${name}=" "${target}/.rvmrc" | sed "s/^export ${name}=//" )"
  else
    # if not defined - define it
    _user_path="\${HOME}/.rvm/${eval_target}"
    echo "export ${name}=\"${_user_path}\"" >> "${target}/.rvmrc"
  fi

  # subprocess cause we change the HOME
  (
    # set home to target, so --skel works fine
    HOME="${target}"
    # resolve the stored path
    eval "_user_path=\"${_user_path}\""

    # ensure the defined path exists
    [[ -d "${_user_path}" ]] || mkdir -p "${_user_path}"

    # create empty db files for rvm_user_path
    if [[ "$eval_target" == "user" ]]
    then
      for file in db md5 rvmrcs sha512
      do
        [[ -f "${_user_path}/${file}" ]] || touch "${_user_path}/${file}"
      done
    fi
  )
  unset eval_target
}

tools_user()
{
  typeset item dir target
  typeset -a selection

  for item in $@
  do
    case "$item" in
      all)     selection+=( gemsets rubies hooks pkgs wrappers userdb log ) ;;
      rubies)  selection+=( rubies  ) ;;
      gemsets) selection+=( gemsets userdb log ) ;;
      hooks)   selection+=( hooks   ) ;;
      pkgs)    selection+=( pkgs    ) ;;
      userdb)  selection+=( userdb  ) ;;
      log)     selection+=( log  ) ;;
      --skel)  rvm_skel_flag=1        ;;
      *)
        tools_user_usage "Unrecognized option '$item'."
        exit 1
        ;;
    esac
  done

  if (( ${#selection[@]} == 0 ))
  then
    tools_user_usage
    exit 1
  fi

  if [[ ${rvm_skel_flag:-0} == 1 ]] && (( UID ))
  then
    tools_user_usage "The --skel flag should be run as root: rvmsudo rvm user $@."
    exit 1
  fi

  [[ ${rvm_skel_flag:-0} == 1 ]] && target=/etc/skel || target="${HOME}"

  if [[ ! -w "${target}" ]] || [[ -d "${target}/.rvm" && ! -w "${target}/.rvm" ]]
  then
    tools_user_usage "Directory '${target}' or '${target}/.rvm' is not writable for current user."
    exit 1
  fi

  if [[ -f "${target}/.rvmrc" && ! -w "${target}/.rvmrc" ]]
  then
    tools_user_usage "Configuration file '${target}/.rvmrc' is not writable for current user."
    exit 1
  fi

  for item in "${selection[@]}"
  do
    case "$item" in
      rubies)
        for dir in archives bin environments gems gems_cache log repos rubies rubygems src tmp wrappers user
        do
          tools_user_setup "${target}" $dir
        done
        ;;
      gemsets)
        for dir in environments gems gems_cache wrappers
        do
          tools_user_setup "${target}" $dir
        done
        ;;
      hooks)
        tools_user_setup "${target}" hooks
        ;;
      pkgs)
        tools_user_setup "${target}" usr
        ;;
      userdb)
        tools_user_setup "${target}" user
        ;;
      log)
        tools_user_setup "${target}" log
        ;;
    esac
  done
}

tools_mirror()
{
  typeset n file warn
  warn=0
  file="$rvm_user_path/db"

  for n in 1.0 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0
  do
    if GREP_OPTIONS="" \grep "^ruby_${n}_url=" "$file" >/dev/null
    then
      if (( ${rvm_force_flag:-0} == 1 ))
      then
        __rvm_sed_i "${file}" -e "s/^ruby_${n}_url=.*$/ruby_${n}_url=http:\/\/www.mirrorservice.org\/sites\/ftp.ruby-lang.org\/pub\/ruby\/${n}/"
      else
        warn=1
      fi
    else
      printf "ruby_${n}_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/${n}
" >> "$file"
    fi
  done

  if (( warn == 1 ))
  then
    rvm_warn "Some settings already exist, use 'rvm --force tools mirror' to overwrite."
  fi
}

tools_rvm_env()
{
  typeset script
  rvm_log "# use shebang: #!/usr/bin/$1-rvm-env 1.9.3"
  for script in $@
  do
    if builtin command -v ${script} >/dev/null
    then
      sudo ln -nfs $rvm_bin_path/rvm-shell /usr/bin/${script}-rvm-env &&
        rvm_log "Created link '/usr/bin/${script}-rvm-env'." ||
        rvm_error "Cannot create link '/usr/bin/${script}-rvm-env'."
    else
      rvm_error "There is no command/script '${script}' in system."
    fi
  done
}

args=($*)
action="${args[0]}"
args="$(echo ${args[@]:1})" # Strip trailing / leading / extra spacing.

[[ -z "$action" ]] && usage

case "$action" in
  identifier)      tools_identifier ;;
  path-identifier) tools_path_identifier "$args" ;;
  strings)         tools_strings "$args" ;;
  mirror)          tools_mirror ;;
  user)            __rvm_call_with_restored_umask tools_user "$args" ;;
  rvm-env)         tools_rvm_env $args ;;
  *)               usage ;;
esac

exit $?
