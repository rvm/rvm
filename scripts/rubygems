#!/usr/bin/env bash

source "$rvm_scripts_path/base"
source "$rvm_scripts_path/functions/db"

result=0

__rvm_become

rubygems_remove()
{
  typeset rubygems_path ruby entry

  rvm_log "Removing old Rubygems files..."

  case "$rvm_ruby_string" in
    (rbx-*)
      ruby="['prefix']"
      ;;
    (*)
      ruby=".values_at('sitelibdir','vendorlibdir').detect{ |path| File.directory?(File.join(path.to_s, 'rubygems')) }.to_s"
      ;;
  esac
  rubygems_path="$(ruby -rrbconfig -e "puts ::Kernel.const_get('RbConfig')::CONFIG$ruby")"

  # Remove common files installed by ruby gems.
  entries=(
  "${rubygems_path}/ubygems.rb"
  "${rubygems_path}/gauntlet_rubygems.rb"
  "${rubygems_path}/rbconfig/"
  )
  for entry in "${entries[@]}" "${rubygems_path}/rubygems"*
  do
    __rvm_rm_rf "$entry"
  done
}

can_switch_rubygems()
{
  case "$rvm_ruby_string" in
    maglev*)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

make_sure_jruby_can_work_with_rubygems()
{
  case "$rvm_ruby_string" in
    jruby-head*)
      true
      ;;
    jruby*)
      __rvm_version_compare "$rvm_ruby_version" -ge 1.7.1 || return 1
      ;;
    *)
      return 0 # do not care about other rubies
      ;;
  esac

  case "${rvm_rubygems_version}" in
    head|master)
      true
      ;;
    *)
      __rvm_version_compare "$rvm_rubygems_version" -ge 2.0.0 || return 1
      ;;
  esac
}

does_not_work_with_rubygems()
{
  rvm_error "RVM can not install rubygems for maglev and older jruby, select other ruby and try again."
  exit 1
}

rubygems_version_list()
{
  curl -s https://api.github.com/repos/rubygems/rubygems/tags |
    sed -n '/"name": / {s/^.*".*": "v\(.*\)".*$/\1/; p;}' |
    LC_ALL=C sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n
}

rubygems_master_sha()
{
  curl -s "https://api.github.com/repos/rubygems/rubygems/commits?page=last&per_page=1" | sed -n '/^    "sha":/ {s/^.*".*": "\(.*\)".*$/\1/;p;}'
}

rubygems_select_version_url()
{
  case "$version" in
    latest|current)
      case "$rvm_ruby_string" in
        ruby-1.8*|ree-1.8*)
          typeset _rbv
          _rbv=${rvm_ruby_version##*.}
          if (( _rbv <= 5 ))
          then
            version=1.3.5
          elif (( _rbv == 6 ))
          then
            version=1.3.7
          fi
          ;;
      esac
      ;;
  esac

  case "$version" in
    latest|current)
      version="$(__rvm_db "${rvm_ruby_string//-/_}_rubygems_version")"
      version="${version:-"$(__rvm_db "${rvm_ruby_interpreter}_rubygems_version")"}"
      version="${version:-"$(__rvm_db "rubygems_version")"}"
      ;;
  esac

  case "$version" in
    latest-*)
      version="${version#latest-}"
      version="$(rubygems_version_list | GREP_OPTIONS="" \grep "^${version}\." | tail -n 1 )"
      version="${version}"
      ;;
  esac

  case "${version:-missing}" in
    head|master)
      typeset sha
      sha="$(rubygems_master_sha)"
      rvm_rubygems_version="$version"
      rvm_gem_package_name="rubygems-rubygems-${sha:0:7}"
      rvm_gem_url="https://github.com/rubygems/rubygems/tarball/${sha}"
      ;;
    missing)
      rvm_error "There was an error while trying to resolve rubygems version for '$1'. \nHalting the installation."
      return 4
      ;;
    *)
      rvm_rubygems_version="$version"
      rvm_gem_package_name="rubygems-${rvm_rubygems_version}"
      rvm_rubygems_url=$(__rvm_db "rubygems_url")
      rvm_gem_url="${rvm_rubygems_url}/${rvm_gem_package_name}.tgz"
      ;;
  esac
}

rubygems_setup()
{
  __rvm_warn_on_rubyopt

  true ${rvm_ruby_selected_flag:=0}

  unset RUBYOPT

  (( rvm_ruby_selected_flag == 0 )) || __rvm_select

  rubygems_select_version_url "$version" || return $?

  make_sure_jruby_can_work_with_rubygems || does_not_work_with_rubygems

  # Sanity check... If setup.rb is missing from the rubygems source path,
  # something went wrong. Cleanup, aisle 3!
  [[ -f "${rvm_src_path}/$rvm_gem_package_name/setup.rb" ]] ||
    __rvm_rm_rf "${rvm_src_path}/$rvm_gem_package_name"

  if
    [[ ! -d "${rvm_src_path}/${rvm_gem_package_name}" ]]
  then
    rvm_log "Retrieving $rvm_gem_package_name"
    if
      "$rvm_scripts_path/fetch" "$rvm_gem_url" "${rvm_gem_package_name}.tgz"
    then
      true
    else
      result=$?
      rvm_error "There has been an error while trying to fetch the source. \nHalting the installation."
      return $result
    fi

    [[ -d "${rvm_src_path}/$rvm_gem_package_name" ]] ||
      \mkdir -p "${rvm_src_path}/$rvm_gem_package_name"

    __rvm_log_command "rubygems.extract" "Extracting $rvm_gem_package_name ..." \
      __rvm_package extract "${rvm_archives_path}/$rvm_gem_package_name.tgz" "${rvm_src_path}"
  fi

  rubygems_remove # Remove old gems.

  __rvm_cd "${rvm_src_path}/$rvm_gem_package_name"

  __rvm_run "rubygems.install" \
    "GEM_PATH=\"$GEM_PATH:${GEM_PATH%%@*}@global\" GEM_HOME=\"$GEM_HOME\" \"${rvm_ruby_binary}\" \"${rvm_src_path}/$rvm_gem_package_name/setup.rb\"" \
    "Installing $rvm_gem_package_name for ${rvm_ruby_string} ..."
  result=$?
  if (( result == 0 ))
  then
    typeset program_suffix
    program_suffix="$( __rvm_ruby_config_get configure_args "${rvm_ruby_binary}" )"
    case "${program_suffix:-}" in
      (*--program-suffix=*)
        program_suffix="${program_suffix#*--program-suffix=}"
        program_suffix="${program_suffix%%[\' ]*}"
        __rvm_run "link.gem" "ln -s \"$rvm_ruby_home/bin/gem${program_suffix}\" \
          \"$rvm_ruby_home/bin/gem\"" "$rvm_ruby_string - #linking gem${program_suffix} -> gem "
        ;;
    esac
    rvm_log "Installation of rubygems completed successfully."
  else
    rvm_warn "Installation of rubygems did not complete successfully."
  fi

  __rvm_rubygems_create_link "${rvm_ruby_binary}"
}

rubygems_link()
{
  __rvm_rubygems_create_link
}

builtin command -v ruby > /dev/null || {
  rvm_error "'ruby' was not found, cannot install rubygems unless ruby is present (Do you have an RVM ruby installed & selected?)"
  exit 1
}

#
# rvm rubygems X
#
export version
version="$1"

[[ -n "$version" ]] || {
  rvm_error "Usage: rvm rubygems [x.y.z|latest-x.y|latest|remove]"
  exit 1
}

can_switch_rubygems || does_not_work_with_rubygems

case "$version" in
  remove|link)
    rubygems_$version
    ;;
  *)
    rubygems_setup
    ;;
esac
