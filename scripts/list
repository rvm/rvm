#!/usr/bin/env bash

rvm_base_except="selector"

source "$rvm_scripts_path/base"

usage()
{
  printf "%b" "
  Usage:

    rvm list [action]

  Actions:

  {help,known,gemsets,default [string],rubies,strings,known_strings,ruby_svn_tags}

"

  return 0
}

list_gemsets()
{
  typeset all_rubies version versions ruby_version_name current_ruby selected system_ruby system_version string binary

  if [[ "${1:-""}" == "strings" ]]
  then
    list_gemset_strings
    return 0
  fi

  current_ruby="$(__rvm_env_string)"

  all_rubies="$(list_strings | sort)"

  printf "%b" "\nrvm gemsets\n"

  versions=($(
    builtin cd "${rvm_gems_path:-"$rvm_path/gems"}/"
    find . -maxdepth 1 -mindepth 1 -type d -print 2> /dev/null | \
      awk '/[a-z]*-.*/ {print $NF}' | sort
  ))

  for version in "${versions[@]//.\/}"
  do
    ruby_version_name="$(echo "$version" | awk -F"${rvm_gemset_separator:-"@"}" '{print $1}')"

    if [[ "$all_rubies" != *"$ruby_version_name"* ]]
    then
      continue
    fi

    if printf "%b" "$version" | grep '^jruby-' >/dev/null 2>&1
    then
      string="[ $("$rvm_rubies_path/$ruby_version_name/bin/ruby" -v | awk '{print $NF}' | sed -e 's/\[//' -e 's/\]//') ]"

    elif [[ -n "$(echo "$version" | awk '/^maglev-|^macruby-/')" ]]
    then
      string="[ x86_64 ]"
    else
      string="[ $(file "$rvm_rubies_path/$ruby_version_name/bin/ruby" | awk '/x86.64/ {print "x86_64"} /386/ {print "i386"} /ppc/ {print "ppc"}' | tr "\n" ' ')]"
    fi

    printf "%b" "\n"

    if [[ "$version" == "$current_ruby" ]]
    then
      printf "%b" "=> "
    else
      printf "%b" "   "
    fi

    if rvm_pretty_print stdout
    then
      printf "%b" "$(__rvm_tput setaf 2)$version$(__rvm_tput sgr0) $string"
    else
      printf "%b" "$version $string"
    fi

  done

  if [[ -f "$rvm_path/config/default" && -s "$rvm_path/config/default" ]]
  then
    version=$(
    grep 'MY_RUBY_HOME' "$rvm_path/config/default" | head -1 | awk -F"'" '{print $2}' | xargs basename --
    )

    if [[ -n "$version" ]]
    then
      printf "%b" "\nDefault Ruby (for new shells)\n"

      string="[ $(file "$rvm_rubies_path/$version/bin/ruby" | awk '/x86.64/ {print "x86_64"} /386/ {print "i386"} /ppc/ {print "ppc"}' | tr "\n" ' ')]"

      if rvm_pretty_print stdout
      then
        printf "%b" "\n  $(__rvm_tput setaf 2)$version$(__rvm_tput sgr0) $string\n"
      else
        printf "%b" "\n  $version $string\n"
      fi
    fi
  fi

  printf "%b" "\n\n"

  return 0
}

list_default()
{
  typeset version string

  if [[ "${args[0]:-""}" == "string" ]]
  then
    "$rvm_scripts_path/alias" show default 2>/dev/null | \
      awk -F"${rvm_gemset_separator:-"@"}" '{print $1}' | \
      xargs basename --

  else
    if [[ -L "$rvm_rubies_path/default" ]]
    then
      version=$(
      "$rvm_scripts_path/alias" show default 2>/dev/null | \
        awk -F"${rvm_gemset_separator:-"@"}" '{print $1}' | \
        xargs basename --
      )

      if [[ -n "$version" ]]
      then
        printf "%b" "\nDefault Ruby (for new shells)\n"

        string="[ $(file "$rvm_rubies_path/$version/bin/ruby" | awk '/x86.64/ {print "x86_64"} /386/ {print "i386"} /ppc/ {print "ppc"}' | \tr "\n" ' ')]"

        if rvm_pretty_print stdout
        then
          printf "%b" "\n   $(__rvm_tput setaf 2)$version$(__rvm_tput sgr0) $string\n"
        else
          printf "%b" "\n   $version $string\n"
        fi
      fi
    fi
  fi

  printf "%b" "\n"

  return 0
}

list_ruby_svn_tags()
{
  typeset prefix tag

  while read -r tag
  do
    prefix="$(
    echo ${tag/\//} | \
      sed 's#^v1_##' | \
      awk -F'_' '{print "(ruby-)1."$1"."$2}' | \
      sed 's#p$##'
    )"

    echo "${prefix}-t${tag/\//}"

  done < <(svn list http://svn.ruby-lang.org/repos/ruby/tags/ | \
    awk '/^v1_[8|9]/')

  return 0
}

# Query for valid rvm ruby strings
# This is meant to be used with scripting.
list_strings()
{
  (
  builtin cd "$rvm_rubies_path"
  find . -maxdepth 1 -mindepth 1 -type d | sed -e 's#./##g'
  )

  return $?
}

# This is meant to be used with scripting.
list_gemset_strings()
{
  typeset all_rubies ruby_name gemset gemsets

  all_rubies="$(list_strings | sort)"

  gemsets=($(
    builtin cd "${rvm_gems_path:-"$rvm_path/gems"}"
    find . -maxdepth 1 -mindepth 1 -type d 2>/dev/null | \
      xargs -n1 basename -- | \
      command grep -v '^\(@\|doc$\|cache$\|system$\)' | sort
    ))

  for gemset in "${gemsets[@]//.\/}"
  do
    ruby_name="${gemset//${rvm_gemset_separator:-"@"}*}"

    if [[ "$all_rubies" != *"$ruby_name"* ]]
    then
      continue
    fi
    echo "$gemset"
  done

  return 0
}

# This is meant to be used with scripting.
list_known_strings()
{
  sed -e 's/#.*$//g' -e 's#\[##g' -e 's#\]##g' < "$rvm_path/config/known" | \
    sort -r | uniq

  return $?
}

list_known()
{
  if [[ "${1:-""}" == "strings" ]]
  then
    list_known_strings
    return 0
  fi

  if [[ -t 0 ]]
  then
    eval "${PAGER:-cat -v} '$rvm_path/config/known'"
  else
    cat "$rvm_path/config/known"
  fi

  return $?
}

list_rubies_strings()
{
  (
  builtin cd "$rvm_rubies_path"
    find -maxdepth 0 -type d | tail -n+2 | xargs -n1 basename -- |  __rvm_strip
  )

  return $?
}

list_rubies()
{
  typeset current_ruby rubies version selected system_ruby system_version \
    default_ruby string binary

  if [[ "${1:-""}" == "strings" ]]
  then
    list_rubies_strings
    return 0
  fi

  current_ruby="$( __rvm_env_string )"
  current_ruby="${current_ruby%${rvm_gemset_separator:-"@"}.*}"

  default_ruby="$( "$rvm_scripts_path/alias" show default 2>/dev/null )"
  default_ruby="${default_ruby%${rvm_gemset_separator:-"@"}.*}"

  printf "%b" "\nrvm rubies\n\n"

  rubies=($(
    builtin cd "$rvm_rubies_path/"
    find . -maxdepth 1 -mindepth 1 -type d 2> /dev/null | sort
  ))

  for version in "${rubies[@]//.\/}"
  do
    if [[ ! -x "$rvm_rubies_path/$version/bin/ruby" ]]
    then
      continue
    fi

    if [[ "$version" = "$current_ruby" && "$version" = "$default_ruby" ]]
    then
      printf "%b" "=* "
    elif [[ "$version" = "$current_ruby" ]]
    then
      printf "%b" "=> "
    elif [[ "$version" = "$default_ruby" ]]
    then
      printf "%b" " * "
    else
      printf "%b" "   "
    fi

    if [[ ! -z "$(echo "$version" | awk '/^maglev-|^macruby-/')" ]] ; then
      string="[ x86_64 ]"
    else
      string="[ $(. $rvm_rubies_path/$version/config ; echo $target_cpu) ]"
    fi

    if rvm_pretty_print stdout
    then
      printf "%b" "$(__rvm_tput setaf 2)$version$(__rvm_tput sgr0) $string"
    else
      printf "%b" "$version $string"
    fi

    printf "%b" "\n"
  done

  if (( ${#rubies[@]} == 0 ))
  then
    printf "%b" "
# No rvm rubies installed yet. Try 'rvm help install'.
"
  else
    if [[ -z "${default_ruby}" ]]
    then
      printf "%b" "
# Default ruby not set. Try 'rvm alias create default <ruby>'.
"
    fi
    printf "%b" "
# => - current
# =* - current && default
#  * - default
"
  fi

  printf "%b" "\n"

  return 0
}

# List all rvm installed rubies, default ruby and system ruby.
# Display the rubies, indicate their architecture and indicate which is currently used.
# This is not meant to be used with scripting. This is for interactive mode usage only.
args=($*)
action="${args[0]:-""}"
args=${args[@]:1} # Strip trailing / leading / extra spacing.


if [[ -z "$action" ]]
then
  list_rubies
  exit 0
fi

case "$action" in
  known)         list_known           ;;
  known_strings) list_known_strings   ;;
  gemsets)       list_gemsets "$args" ;;
  default)       list_default         ;;
  rubies)        list_rubies "$args"  ;;
  strings)       list_strings         ;;
  ruby_svn_tags) list_ruby_svn_tags   ;;
  help)          usage                ;;
  *)             usage ; exit 1       ;;
esac

exit $?
