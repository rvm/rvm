#!/usr/bin/env bash

# 1.9.3-p125+
__clang_ok()
{
  if [[ -n "$rvm_force_clang_ok" ]]; then
      return 0
  fi
  typeset _patch_level
  case ${rvm_ruby_string} in
    ruby-1.9.3-head*|ruby-2*)
      return 0
      ;;
    ruby-1.9.3*)
      _patch_level="${rvm_ruby_patch_level:-p0}"
      _patch_level="${_patch_level#p}"
      (( _patch_level >= 125 )) && return 0 || true
      ;;
  esac
  return 1
}

ruby_install()
{
  typeset result temp_flags _iterator

  __rvm_check_for_bison ||
  {
    result=$?
    rvm_error "Bison required but not found. Halting."
    return $result
  }

  case ${rvm_ruby_string:-""} in
    ruby-1.8.*-head)
      __rvm_ensure_has_mri_ruby "1.8.|ree" || return $?
      ;;
    ruby-head|ruby-1.9.*-head)
      __rvm_ensure_has_mri_ruby || return $?
      typeset compatible_baseruby
      if
        compatible_baseruby="$rvm_wrappers_path/$(__rvm_mri_ruby)/ruby" &&
        [[ -x "$compatible_baseruby" ]]
      then
        rvm_configure_flags+=( --with-baseruby="$compatible_baseruby" )
      else
        return $?
      fi
      ;;
  esac

  # TODO: needed on some 1.9.3, confirm with http://bugs.ruby-lang.org/issues/6903
  if
    [[ " ${rvm_configure_flags[*]}" =~ " --enable-load-relative" ]]
  then
    case ${rvm_ruby_string} in
      ruby-1.9.3-p125|ruby-1.9.3-p286|ruby-1.9.3-p327|ruby-1.9.3-p362|ruby-1.9.3-p374|ruby-1.9.3-p385)
        rvm_patch_names+=( ruby-multilib )
        ;;
    esac
  fi

  __rvm_setup_compile_environment "${rvm_ruby_string}" || return $?

  # Force using clang when only LLVM available and user did not selected compiler,
  # hides the need for `rvm_force_autoconf=1`
  # which should be default, but is not by default available on Xcode 4.3.
  if [[ "$MACHTYPE" == *darwin* ]] &&
    __clang_ok && __rvm_compiler_is_llvm &&
    ! __rvm_selected_compiler > /dev/null
  then
    rvm_configure_flags+=( --with-gcc=clang )
  fi

  if __rvm_compiler_is_llvm
  then
    if __clang_ok || __rvm_selected_compiler > /dev/null
    then
      rvm_warn "Building '${rvm_ruby_string}' using clang - but it's not (fully) supported, expect errors."
    else
      rvm_error "The provided compiler '$(__rvm_found_compiler)' is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`."
      return 1
    fi
  fi

  ( __rvm_install_source $* )
  result=$?

  if
    [[ "$MACHTYPE" == *darwin* && " ${rvm_configure_flags[*]}" =~ " --enable-load-relative" ]]
  then
    typeset libyaml_lib_path_old libyaml_lib_path_new psych_lib_path target_path target_path_escaped
    target_path="${rvm_rubies_path%/}/${rvm_ruby_string}"
    target_path_escaped="${target_path//\//\/}"
    libyaml_lib_path_old="$( find "$target_path" -name libyaml-*.dylib )"
    libyaml_lib_path_new="${libyaml_lib_path_old/${target_path_escaped}/@executable_path/..}"
    psych_lib_path="$( find "${target_path}" -name psych.bundle )"
    __rvm_log_command fix.osx.dependencies "fix osx dependencies" install_name_tool -change "${libyaml_lib_path_old}" "${libyaml_lib_path_new}" "${psych_lib_path}"
  fi

  if __rvm_compiler_is_llvm
  then
    rvm_warn "Ruby '${rvm_ruby_string}' was built using clang - but it's not (fully) supported, expect errors."
  fi

  typeset patches_count
  patches_count=$(
    rvm_ruby_string="${rvm_ruby_string}" "$rvm_scripts_path/patchsets" show default | wc -l
  )
  # 1.9.3 provides a patch to compile better with LLVM
  if [[ ! "${rvm_ruby_string}" =~ "ruby-1.9.3" ]] && (( patches_count > 0 ))
  then
    typeset _default _version _patch
    _default=$(__rvm_db "default_ruby")
    _version=$(__rvm_db "${_default}_version")
    _patch=$(__rvm_db "${_default}_${_version}_patch_level")
    _version="${_default}-${_version}${_patch:+-}${_patch:-}"
    rvm_warn "Please be aware that you just installed a ruby that requires ${patches_count} patches just to be compiled on up to date linux system.
This may have known and unaccounted for security vulnerabilities.
Please consider upgrading to ${_version} which will have all of the latest security patches."
  fi

  return ${result:-0}
}
