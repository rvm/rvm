#!/usr/bin/env bash

__rvm_setup_compile_environment()
{
  typeset __type
  typeset -a __types
  __types=(
    requirements osx_gcc architectures gcc47 smartos sunos openbsd
    flags_docs flags_tcltk flags_shared_static flags_threads
  )
  for __type in "${__types[@]}"
  do
    rvm_debug "__rvm_setup_compile_environment_${__type} $1"
    __rvm_setup_compile_environment_${__type} "$1" || return $?
  done
  rvm_debug "found compiler: $( __rvm_found_compiler )"
}

# 2.0.0+
__ruby_clang_ok()
{
  case "$1" in
    ruby-2*|ruby-head*) return 0 ;;
  esac
  return 1
}

__rvm_setup_compile_environment_osx_gcc()
{
  [[ "Darwin" == "$(uname)" ]] || return 0

  if
    __rvm_selected_compiler > /dev/null
  then
    true
  elif
    __ruby_clang_ok "$1"
  then
    rvm_configure_flags+=( --with-gcc=clang )
  elif
    [[ -x /usr/local/bin/gcc-4.2 ]] # HomeBrew
  then
    rvm_configure_flags+=( --with-gcc=/usr/local/bin/gcc-4.2 )
  elif
    [[ -x /opt/local/bin/gcc-apple-4.2 ]] # MacPorts
  then
    rvm_configure_flags+=( --with-gcc=/opt/local/bin/gcc-apple-4.2 )
  elif
    __rvm_which gcc-apple-4.2 > /dev/null # MacPorts via PATH
  then
    rvm_configure_flags+=( --with-gcc=gcc-apple-4.2 )
  elif
    __rvm_which gcc-4.2 > /dev/null # Any gcc-4.2
  then
    rvm_configure_flags+=( --with-gcc=gcc-4.2 )
  elif
    [[ -x /usr/bin/gcc-4.2 ]] # OSX-GCC-Installer / Xcode - might be LLVM
  then
    rvm_configure_flags+=( --with-gcc=/usr/bin/gcc-4.2 )
  fi

  if
    __rvm_compiler_is_llvm &&
    ! __rvm_selected_compiler >/dev/null
  then
    rvm_configure_flags+=( --with-gcc=clang )
  fi

  if __rvm_array_contains "*debug*" "${rvm_patch_names[@]}"
  then rvm_force_autoconf_flag=1
  fi
}

__rvm_setup_compile_environment_architectures_default()
{
  typeset _architecture _architectures_string
  typeset -a _architectures _flags

  _architectures=()
  for _architecture in ${rvm_architectures//,/ }
  do _architectures+=( -arch "${_architecture}" )
  done
  _architectures_string="${_architectures[*]}"

  _flags=(
    CFLAGS="${_architectures_string}"
    CCFLAGS="${_architectures_string}"
    CXXFLAGS="${_architectures_string}"
    LDFLAGS="${_architectures_string}"
  )
  __rvm_update_configure_env "${_flags[@]}"
  rvm_configure_flags+=( --disable-dependency-tracking )
}

__rvm_setup_compile_environment_architectures_ruby_osx()
{
  typeset _architecture _architectures_string
  typeset -a _architectures _flags

  _architectures=()
  for _architecture in ${rvm_architectures//,/ }
  do _architectures+=( -arch "${_architecture}" )
  done
  _architectures_string="${_architectures[*]}"

  _flags=(
    MACOSX_DEPLOYMENT_TARGET="$( sw_vers -productVersion | awk -F'.' '{print $1"."$2}' )"
    CFLAGS="${_architectures_string} -g -Os -pipe -no-cpp-precomp"
    CCFLAGS="${_architectures_string} -g -Os -pipe"
    CXXFLAGS="${_architectures_string} -g -Os -pipe"
    LDFLAGS="${_architectures_string} -bind_at_load"
    LDSHARED="cc ${_architectures_string} -dynamiclib -undefined suppress -flat_namespace"
  )
  __rvm_update_configure_env "${_flags[@]}"
  __rvm_array_contains "*osx-arch-fix*" "${rvm_patch_names[@]}" || rvm_patch_names+=( osx-arch-fix )
}

__rvm_setup_compile_environment_architectures()
{
  [[ -n "${rvm_architectures:-}" ]] || return 0
  case "$1" in
    ruby-1.9*|ruby-2*|ruby-head*)
      # Ruby 1.9+ supports the easy way
      rvm_configure_flags+=( --with-arch="${rvm_architectures}" )
      ;;
    ruby*|ree*)
      case "$(uname)" in
        (Darwin)
          __rvm_setup_compile_environment_architectures_ruby_osx
          ;;
        (*)
          __rvm_setup_compile_environment_architectures_default
          ;;
      esac
      ;;
    *)
      __rvm_setup_compile_environment_architectures_default
      ;;
  esac
}

__rvm_setup_compile_environment_gcc47()
{
  __rvm_compiler_is_gcc47 || return 0
  __rvm_string_match "$1" "ruby-1.8.*" "ree*" || return 0

  # -g -O2 from 1.8.7-p370 is not enough, need all the flags to fix it
  __rvm_update_configure_env CFLAGS="-O2 -fno-tree-dce -fno-optimize-sibling-calls"
}

__rvm_setup_compile_environment_smartos()
{
  [[ "$(uname -v)" =~ ^joyent ]] || return 0
  __rvm_update_configure_opt_dir "$1" "/opt/local" # TODO do we needed the next line?
  __rvm_update_configure_env CCFLAGS="-I/opt/local/include"
  __rvm_add_to_path prepend "/opt/local/gnu/bin"
}

__rvm_setup_compile_environment_sunos()
{
  [[ "$(uname -s)" == "SunOS" ]] || return 0
  case "$1" in
    ruby-1.9*|ruby-2*)
      # Temporary solution for this bug http://bugs.ruby-lang.org/issues/5384
      rvm_configure_flags+=( ac_cv_func_dl_iterate_phdr=no )
      ;;
  esac
}


__rvm_setup_compile_environment_openbsd()
{
  [[ "$(uname)" == "OpenBSD"     ]] || return 0
  if
    [[  -z "${AUTOCONF_VERSION:-}" ]]
  then
    export AUTOCONF_VERSION
    AUTOCONF_VERSION="$( ls -1 /usr/local/bin/autoreconf-* | sort | tail -n 1 )"
    AUTOCONF_VERSION="${AUTOCONF_VERSION##*-}"
  fi
  if
    [[  -z "${AUTOMAKE_VERSION:-}" ]]
  then
    export AUTOMAKE_VERSION
    AUTOMAKE_VERSION="$( ls -1 /usr/local/bin/automake-* | sort | tail -n 1 )"
    AUTOMAKE_VERSION="${AUTOMAKE_VERSION##*-}"
  fi
  # https://github.com/wayneeseguin/rvm/issues/1581
  rvm_configure_env+=( sh )
  case "$1" in
    ruby-1.9*|ruby-2*)
      # Temporary solution for this bug http://bugs.ruby-lang.org/issues/5384
      rvm_configure_flags+=( ac_cv_func_dl_iterate_phdr=no )
      ;;
  esac
}

__rvm_setup_compile_environment_flags_docs()
{
  if
    (( ${rvm_docs_flag:-0} == 1 ))
  then
    true # enabled by default
  else
    case "$1" in
      (rbx*|rubinius*)
        true # no flag yet for rbx!
        ;;
      (*)
        rvm_configure_flags+=( --disable-install-doc )
        ;;
    esac
  fi
  true # OSX --trace FIX
}

__rvm_setup_compile_environment_flags_tcltk()
{
  [[ "Darwin" == "$(uname)" ]] || return 0

  [[ " ${rvm_configure_flags[*]} " =~ " --with-tcl "    ]] ||
  [[ " ${rvm_configure_flags[*]} " =~ " --with-tk "     ]] ||
  [[ " ${rvm_configure_flags[*]} " =~ " --without-tcl " ]] ||
  [[ " ${rvm_configure_flags[*]} " =~ " --without-tk "  ]] ||
  rvm_configure_flags+=( --without-tcl --without-tk )

  true # OSX --trace FIX
}

__rvm_setup_compile_environment_flags_shared_static()
{
  if
    (( ${rvm_static_flag:-0} == 1 ))
  then
    case "$1" in
      (openssl*)  rvm_configure_flags+=( no-shared )
        ;;
      (ncurses*)  rvm_configure_flags+=( --without-shared )
        ;;
      (rbx*|rubinius*) true # no flag yet for rbx!
        ;;
      (*)         rvm_configure_flags+=( --disable-shared )
        ;;
    esac
  else
    case "$1" in
      (openssl*)  rvm_configure_flags+=( shared )
        ;;
      (readline*) rvm_configure_flags+=( --disable-static --enable-shared )
        ;;
      (ncurses*)  rvm_configure_flags+=( --with-shared )
        ;;
      (rbx*|rubinius*) true # no flag yet for rbx!
        ;;
      (*)         rvm_configure_flags+=( --enable-shared )
        ;;
    esac
  fi
  true # OSX --trace FIX
}

__rvm_detect_max_threads()
{
  case "$(uname)" in
    (Darwin|FreeBSD)
      sysctl -n hw.ncpu
      ;;
    (*)
      cat /proc/cpuinfo 2>/dev/null | (grep vendor_id || echo 'one';) | wc -l
      ;;
  esac
}

__rvm_setup_compile_environment_flags_threads()
{
  case "$1" in
    (openssl*)
      # Don't use -j option for make OpenSSL
      __rvm_remove_from_array rvm_make_flags "-j*" "${rvm_make_flags[@]}"
      rvm_make_flags+=( -j1 )
      ;;
    (*)
      [[ " ${rvm_make_flags[*]}" =~ " -j" ]] || rvm_make_flags+=( -j$(__rvm_detect_max_threads) )
      ;;
  esac
}

__rvm_setup_compile_environment_requirements_iterate()
{
  typeset -a list
  typeset element

  list=( update-system rvm )
  if (( $# ))
  then list+=( "$@" )
  else list+=( ruby )
  fi

  for element in "${list[@]}"
  do requirements_$_system_name "${element}" || return $?
  done
}

#
# rvm_autolibs_flag
# - 0 - disabled
# - 1 - use libs, do not install
# - 2 - use libs, install if missing, fallback to 1 if brew not writable
# - 3 - 2 + install package manager if not available
# - 4 - 3 + error out if brew not writable, no fallback
#
# default for rvm_autolibs_flag
# - 1 - for system installation
# - 3 - for user   installation
#
__rvm_setup_compile_environment_requirements()
{
  if (( UID == 0 ))
  then (( ${rvm_autolibs_flag:=1} > 0 )) || return 0
  else (( ${rvm_autolibs_flag:=3} > 0 )) || return 0
  fi

  __rvm_detect_system
  [[ -s "$rvm_scripts_path/functions/requirements/$_system_name" ]] ||
  {
    rvm_error "Requirements support for $_system_name/$_system_version/$_system_arch is not implemented yet,
      report a bug here => https://github.com/wayneeseguin/rvm/issues"
    return 1
  }

  rvm_log "Installing requirements for $_system_name/$_system_version/$_system_arch, might require sudo password"
  source "$rvm_scripts_path/functions/requirements/$_system_name"

  __rvm_setup_compile_environment_requirements_iterate "$@"
}

#### Helpers for: requirements_$_system_name

__rvm_filter_installed_packages_reset()
{
  packages_installed=()
  packages_missing=()
  packages_to_install=()
}

__rvm_filter_installed_package_check()
{
  if
    "$1" "$2"
  then
    packages_installed+=( "$2" )
  else
    case "$rvm_autolibs_flag" in
      (0|1)  packages_missing+=( "$2" ) ;; # just ignore
      (*) packages_to_install+=( "$2" ) ;; # 2+
    esac
  fi
}

__rvm_filter_installed_packages_summary()
{
  (( ${#packages_installed[@]} == 0 )) ||
  {
    _list="${packages_installed[*]}"
    rvm_debug "Found required packages: ${_list// /, }."
  }
  (( ${#packages_missing[@]} == 0 )) ||
  {
    _list="${packages_missing[*]}"
    if (( rvm_autolibs_flag ))
    then rvm_warn "Missing required packages: ${_list// /, }."
    else rvm_debug "Missing required packages: ${_list// /, }."
    fi
  }
}

__rvm_filter_installed_packages_install()
{
  (( ${#packages_to_install[@]} == 0 )) ||
  {
    _list="${packages_to_install[*]}"
    __rvm_log_command package_install_${_list// /_} "Installing required packages: ${_list// /, }." \
      "$1" "${packages_to_install[@]}" ||
      return $?
  }
}

__rvm_filter_installed_packages()
{
  typeset _package_installed_cmd _packages_install_cmd _package_name _list

  _package_installed_cmd="requirements_$1_lib_installed"
  _package_install_cmd="requirements_$1_libs_install"
  shift

  __rvm_filter_installed_packages_reset
  for _package_name
  do __rvm_filter_installed_package_check "${_package_installed_cmd}" "${_package_name}"
  done
  __rvm_filter_installed_packages_summary
  __rvm_filter_installed_packages_install "${_package_install_cmd}"
}

__rvm_try_sudo()
{
  typeset -a command_to_run
  command_to_run=()
  case "$rvm_autolibs_flag" in
    (0|1)
      (( UID == 0 )) || return 0 # do not run nothing if it would require sudo
      ;;
    (*)
      (( UID == 0 )) || command_to_run+=( sudo )
      ;;
  esac
  "${command_to_run[@]}" "$@"
}
