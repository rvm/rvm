#!/usr/bin/env bash

if [[ ! " ${rvm_tar_options:-} " =~ " --no-same-owner "  ]] && \
  tar --help | \grep -- --no-same-owner >/dev/null
then
  rvm_tar_options="${rvm_tar_options:-} --no-same-owner"
  rvm_tar_options="${rvm_tar_options## }"
fi

#
# Functions RVM is built on
#
# match <value> <string|glob>
match()
{
  case "$1" in
    $2) return 0 ;;
    *)  return 1 ;;
  esac
}

is_a_function() {
  typeset -f $1 >/dev/null 2>&1 || return $?
}

#
# RVM specific functions.
#

__rvm_warn_on_rubyopt()
{
  if [[ -n "${RUBYOPT:-""}" ]]; then
    rvm_warn \
      "Please note: You have the RUBYOPT environment variable set and this \
            may interfere with normal rvm operations. We sugges unsetting it."
    return 1
  else
    return 0
  fi
}

__rvm_strings()
{
  typeset strings ruby_strings

  ruby_strings=($(echo ${rvm_ruby_args:-$rvm_ruby_string}))

  for rvm_ruby_string in "${ruby_strings[@]}" ; do
    strings="$strings $(__rvm_select ; echo $rvm_ruby_string)"
  done

  echo $strings

  return 0
}

# Return a list of directories under a given base path.
# Derived from rvm_ruby_string.
__rvm_ruby_string_paths_under()
{
  typeset path part parts

  path="${1%/}" # Strip off any trailing slash

  parts=(${rvm_ruby_string//-/ }) # Strip white space.

  echo "$path"

  for part in "${parts[@]}"
  do
    path="$path/$part"
    echo "$path"
  done

  return 0
}

__rvm_quote_args()
{
  typeset quoted_string
  quoted_string=""

  for quoted_argument in "$@"
  do
    if printf "%b" "$quoted_argument" | \grep -v "^[[:alnum:]]$" >/dev/null
    then
      quoted_string="$quoted_string '$(printf "%b" "$quoted_argument" \
        | \sed "s/'/\'\\\'\'/g")'" #"-fix display quotes
    else
      quoted_string="$quoted_string $quoted_argument"
    fi
  done

  echo "$quoted_string" | \sed -e 's/^ *//g' -e 's/ *$//g'

  return 0
}

__rvm_quote_args_with_shift()
{
  typeset shift_value
  shift_value="$1"
  shift

  while [[ "$shift_value" -gt 0 && $# -gt 0 ]]
  do
    shift
    ((shift_value--))
  done

  __rvm_quote_args "$@"
  return 0
}


# Run a specified command and log it.
__rvm_run()
{
  typeset name log temp_log_path _command message
  true ${rvm_debug_flag:=0} ${rvm_niceness:=0}

  name="${1:-}"
  _command="${2:-}"
  message="${3:-}"

  if [[ -n "$message" ]]
  then
    rvm_log "$message"
  fi

  if (( rvm_debug_flag > 0 ))
  then
    rvm_debug "Executing: $_command"
  fi

  if [[ -n "${rvm_ruby_string:-}" ]]
  then
    temp_log_path="${rvm_log_path}/$rvm_ruby_string"
  else
    temp_log_path="${rvm_log_path}"
  fi

  log="$temp_log_path/$name.log"

  if [[ ! -d "${log%\/*}" ]]
  then
    \mkdir -p "${log%\/*}"
  fi

  if [[ ! -f "$log" ]]
  then
    \touch "$log" # for zsh :(
  fi

  # TODO: Allow an 'append_flag' setting?
  printf "%b" "[$(date +'%Y-%m-%d %H:%M:%S')] $_command\n" > "$log"

  if (( rvm_niceness > 0 ))
  then
    _command="nice -n $rvm_niceness $_command"
  fi

  eval "$_command" >> "$log" 2>&1
  result=$?

  if (( result > 0 ))
  then
    rvm_error "Error running '$_command', please read $log"
  fi

  return ${result}
}

# Output the current ruby's rvm source path.
__rvm_source_dir()
{
  if [[ ${rvm_ruby_selected_flag:-0} -eq 0 ]]
  then __rvm_select
  fi

  if [[ -z "$rvm_ruby_src_path" ]]
  then
    rvm_error "No source directory exists for the default implementation."
  else
    echo "$rvm_ruby_src_path"
  fi

  return 0
}

# Output an inspection of selected 'binary' scripts, based on CLI selection.
__rvm_inspect()
{
  for binary in $rvm_ruby_args
  do
    actual_file="$(unset -f gem ; builtin command -v gem )"
    rvm_log "$actual_file:"
    if [[ ${rvm_shebang_flag:-0} -eq 1 ]]
    then
      \head -n 1    < "$actual_file"
    fi

    if [[ ${rvm_env_flag:-0} -eq 1 ]]
    then
      \awk '/ENV/'  < "$actual_file"
    fi

    if [[ ${rvm_path_flag:-0} -eq 1 ]]
    then
      \awk '/PATH/' < "$actual_file"
    fi

    if [[ ${rvm_head_flag:-0} -eq 1 ]]
    then
      \head -n 5    < "$actual_file"
    fi

    if [[ ${rvm_tail_flag:-0} -eq 1 ]]
    then
      \tail -n 5    < "$actual_file"
    fi

    if [[ ${rvm_all_flag:-0} -eq 1 ]]
    then
      \cat $actual_file
    fi
  done

  return 0
}

# Strip whitespace and normalize it all.
__rvm_strip()
{
  \sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/[[:space:]]\{1,\}/ /g'
  return $?
}

__rvm_remove_from_path()
{
  export PATH
  PATH=":$PATH:"
  PATH="${PATH//:$1:/:}"
  PATH="${PATH//::/:}"
  PATH="${PATH%:}"
  PATH="${PATH#:}"
}

__rvm_add_to_path()
{
  export PATH

  if (( $# != 2 )) || [[ -z "$2" ]]
  then
    rvm_error "__rvm_add_to_path requires two parameters"
    return 1
  fi

  __rvm_remove_from_path "$2"
  case "$1" in
    prepend) PATH="$2:$PATH" ;;
    append)  PATH="$PATH:$2" ;;
    #*) anything else will just remove it from PATH - not adding back
  esac

  if [[ -n "${rvm_user_path_prefix:-}" ]]
  then
    __rvm_remove_from_path "${rvm_user_path_prefix}"
    PATH="${rvm_user_path_prefix}:$PATH"
  fi

  builtin hash -r
}

__rvm_detect_xcode_version()
{
  typeset version_file
  version_file=/Developer/Applications/Xcode.app/Contents/version.plist

  if [[ -f $version_file ]]
  then
    if [[ -x /usr/libexec/PlistBuddy ]]
    then
      /usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" $version_file
    else
      awk -F"[<>]" '/CFBundleShortVersionString/{ getline ; print $3 }' < $version_file
    fi
  fi
}

__rvm_detect_xcode_version_is()
{
  [[ "$(__rvm_detect_xcode_version)" == "$1" ]] || return 1
}

__rvm_version_compare()
{
  typeset v1 v2 v1d v2d dots x counter IFS
  typeset -a transformer

  v1=$1
  v2=$3
  v1d=$( printf -- $v1 | grep -o '\.' | wc -l )
  v2d=$( printf -- $v2 | grep -o '\.' | wc -l )

  if [[ $v1d -ge $v2d ]]
  then dots=$v1d
  else dots=$v2d
  fi

  if [[ "$MACHTYPE" == *darwin* ]]
  then
    sequencer="jot - $dots 0 -1"
  else
    sequencer="seq $dots -1 0"
  fi

  counter=1
  for x in $( $sequencer )
  do
    transformer+=( "$(( 256 ** x ))*\$${counter}" )
    : $(( counter+=1 ))
  done

  IFS="+" # to put + in transformer ;)
  eval "$(
    printf '[[ ';
    printf $1 | awk -F. "{ printf ${transformer[*]} }";
    printf -- " $2 ";
    printf $3 | awk -F. "{ printf ${transformer[*]} }";
    printf ' ]]'
  )"
}
