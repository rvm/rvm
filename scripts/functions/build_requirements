#!/usr/bin/env bash

rvm_requiremnts_fail()
{
  rvm_$1 "$2
RVM autolibs is now configured with mode '2' => 'check and stop if missing',
please run \`rvm autolibs enable\` to let RVM do its job or run and read \`rvm autolibs [help]\`
or visit https://rvm.io/rvm/autolibs for more information."
}

rvm_requiremnts_fail_or_run_action()
{
  case "${rvm_autolibs_flag_number}" in
    (0) rvm_debug "$2" ;;
    (1) rvm_warn  "$2" ;;
    (2)
      if
        (( $1 <= 2 ))
      then
        rvm_requiremnts_fail error "$2"
        return 1
      else
        rvm_requiremnts_fail warn "$2"
      fi
      ;;
    (*)
      shift 2
      "$@" || return $?
      ;;
  esac
  true # for osx
}

requirements_osx_update_openssl_cert_old() [[ "$cert_file" -ot /Library/Keychains/System.keychain ||
  "$cert_file" -ot /System/Library/Keychains/SystemRootCertificates.keychain
]]

requirements_osx_update_openssl_cert_run()
{
  rvm_log "Updating certificates in '$cert_file'."
  mkdir -p "$ssl_dir"
  security find-certificate -a -p /Library/Keychains/System.keychain > "$cert_file"
  security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain >> "$cert_file"
  "${ssl_binary%/openssl}/c_rehash" "$ssl_dir"
}

requirements_osx_update_openssl_cert()
{
  [[ "Darwin" == "$(uname)" ]] || return 0

  case "${rvm_autolibs_flag_number}" in
    (0)
      rvm_debug "Skipping update of certificates in '$cert_file'."
      return 0
      ;;
  esac

  typeset ssl_binary ssl_dir cert_file
  ssl_binary="${1:-$(which openssl)}"
  ssl_dir="$( "${ssl_binary}" version -d | awk -F'"' '{print $2}' )" #' fix formating
  cert_file="${ssl_dir}/cert.pem"

  if
    requirements_osx_update_openssl_cert_old
  then
    rvm_requiremnts_fail_or_run_action 2 \
      "Skipping update of certificates in '$cert_file'." \
      requirements_osx_update_openssl_cert_run ||
      return $?
  else
    rvm_log "Certificates in '$cert_file' already are up to date."
  fi
}

__rvm_requirements_load()
{
  if
    is_a_function requirements_${1} ||
    is_a_function requirements_${1}_run
  then
    rvm_debug "requirements code for $1 already loaded"
  else
    [[ -s "$rvm_scripts_path/functions/requirements/$1" ]] ||
    {
      rvm_error "Requirements support for $1 is not implemented yet,
report a bug here => https://github.com/wayneeseguin/rvm/issues"
      return 1
    }
    source "$rvm_scripts_path/functions/requirements/$1"
    if
      is_a_function requirements_${1} ||
      is_a_function requirements_${1}_run
    then
      rvm_debug "requirements code for $1 loaded"
    else
      rvm_error "Failed loading requirements for $1!"
      return 1
    fi
  fi
}

__rvm_requirements_iterate()
{
  typeset -a list
  typeset element __handler
  __handler=$1
  shift

  list=( update-system rvm )
  while (( $# )) && [[ -z "$1" ]]
  do shift
  done
  if (( $# ))
  then list+=( "$@" )
  else list+=( ruby )
  fi

  for element in "${list[@]}"
  do ${__handler} "${element}" || return $?
  done
  true
}

__rvm_requirements_run()
{
  typeset __type
  __type=$1
  shift
  __rvm_requirements_load ${__type} || return $?
  if
    is_a_function requirements_${__type}
  then
    requirements_${__type} "$@" || return $?
  elif
    is_a_function requirements_${__type}_run
  then
    __rvm_requirements_iterate requirements_${__type}_run "$@" || return $?
  fi
}

__rvm_filter_installed_packages_reset()
{
  packages_installed=()
  packages_missing=()
  packages_to_install=()
}

__rvm_filter_installed_package_check()
{
  if
    "$1" "$2"
  then
    packages_installed+=( "$2" )
  else
    case "$rvm_autolibs_flag_number" in
      (0|1|2) packages_missing+=( "$2" ) ;; # just ignore
      (*)  packages_to_install+=( "$2" ) ;; # 2+
    esac
  fi
}

__rvm_filter_installed_packages_summary()
{
  (( ${#packages_installed[@]} == 0 )) ||
  {
    _list="${packages_installed[*]}"
    rvm_debug "Found required packages: ${_list// /, }."
  }
  (( ${#packages_missing[@]} == 0 )) ||
  {
    _list="${packages_missing[*]}"
    rvm_requiremnts_fail_or_run_action 2 \
      "Missing required packages: ${_list// /, }." \
      true ||
      return $?
  }
}

__rvm_filter_installed_packages_install()
{
  (( ${#packages_to_install[@]} == 0 )) ||
  {
    _list="${packages_to_install[*]}"
    __rvm_log_command package_install_${_list// /_} "Installing required packages: ${_list// /, }." \
      "$1" "${packages_to_install[@]}" ||
      return $?
  }
}

__rvm_filter_installed_packages()
{
  typeset _package_installed_cmd _packages_install_cmd _package_name _list

  _package_installed_cmd="requirements_$1_lib_installed"
  _package_install_cmd="requirements_$1_libs_install"
  shift

  __rvm_filter_installed_packages_reset
  for _package_name
  do __rvm_filter_installed_package_check "${_package_installed_cmd}" "${_package_name}"
  done
  __rvm_filter_installed_packages_summary || return $?
  __rvm_filter_installed_packages_install "${_package_install_cmd}"
}

__rvm_try_sudo()
{
  typeset -a command_to_run
  command_to_run=()
  (( UID == 0 )) ||
  case "$rvm_autolibs_flag_number" in
    (0|1)
      return 0 # do not run nothing if it would require sudo
      ;;
    (2)
      rvm_requiremnts_fail error "Running '$*' would require sudo."
      return 1
      ;;
    (*)
      command_to_run+=( sudo )
      ;;
  esac
  "${command_to_run[@]}" "$@"
}
