#!/usr/bin/env bash

__rvm_requirements_run()
{
  typeset -a packages_installed packages_missing packages_to_install packages_flags packages_custom
  typeset __type __lib_type __iterator
  __type=$1
  __lib_type=$1
  shift
  for __iterator in load reset before define summary update custom install after
  do
    __rvm_requirements_run_${__iterator} "$@" || return $?
  done
}

__rvm_requirements_run_load()
{
  if
    is_a_function requirements_${__type}_before ||
    is_a_function requirements_${__type}_define
  then
    rvm_debug "requirements code for ${__type} already loaded"
  else
    [[ -s "$rvm_scripts_path/functions/requirements/${__type}" ]] ||
    {
      rvm_error "Requirements support for ${__type} is not implemented yet,
report a bug here => https://github.com/wayneeseguin/rvm/issues"
      return 1
    }
    source "$rvm_scripts_path/functions/requirements/${__type}"
    if
      is_a_function requirements_${__type}_before ||
      is_a_function requirements_${__type}_define
    then
      rvm_debug "requirements code for ${__type} loaded"
    else
      rvm_error "Failed loading requirements for ${__type}!"
      return 1
    fi
  fi
}

__rvm_requirements_run_reset()
{
  packages_installed=()
  packages_missing=()
  packages_to_install=()
  packages_flags=()
  packages_custom=()
}

__rvm_requirements_run_before()
{
  if is_a_function requirements_${__type}_before
  then requirements_${__type}_before "$@" || return $?
  fi
  if [[ "${__lib_type}" != "${__type}" ]] && is_a_function requirements_${__lib_type}_before
  then requirements_${__lib_type}_before "$@" || return $?
  fi
  true # for osx
}

__rvm_requirements_run_define()
{
  typeset -a list
  typeset element __handler
  if is_a_function requirements_${__lib_type}_define
  then __handler=requirements_${__lib_type}_define
  else __handler=requirements_${__type}_define
  fi

  list=( rvm )
  while (( $# )) && [[ -z "$1" ]]
  do shift
  done
  if (( $# ))
  then list+=( "$@" )
  else list+=( ruby )
  fi

  for element in "${list[@]}"
  do ${__handler} "${element}" || return $?
  done
  true
}

__rvm_requirements_run_summary()
{
  (( ${#packages_custom[@]} == 0 )) ||
  {
    _list="${packages_custom[*]}"
    if
      (( ${rvm_autolibs_flag_number} > 2 ))
    then
      rvm_debug "Install custom packages: ${_list// /, }."
    fi
    rvm_requiremnts_fail_or_run_action 3 \
      "Missing custom packages: ${_list// /, }." \
      true ||
      return $?
  }
  (( ${#packages_installed[@]} == 0 )) ||
  {
    _list="${packages_installed[*]}"
    rvm_debug "Found required packages: ${_list// /, }."
  }
  (( ${#packages_custom[@]} == 0 )) ||
  {
    _list="${packages_custom[*]}"
    rvm_debug "Custom packages: ${_list// /, }."
  }
  (( ${#packages_missing[@]} == 0 )) ||
  {
    _list="${packages_missing[*]}"
    rvm_requiremnts_fail_or_run_action 2 \
      "Missing required packages: ${_list// /, }." \
      true ||
      return $?
  }
}

__rvm_requirements_run_update()
{
  if
    (( ${#packages_to_install[@]} > 0 )) ||
    (( ${#packages_custom[@]} > 0 && ${rvm_autolibs_flag_number} > 2 ))
  then
    if
      is_a_function requirements_${__lib_type}_update_system
    then
      rvm_requiremnts_fail_or_run_action 3 \
        "Skipping system update, make sure your system is up to date." \
        requirements_${__lib_type}_update_system "$@" || return $?
    elif
      is_a_function requirements_${__type}_update_system
    then
      rvm_requiremnts_fail_or_run_action 3 \
        "Skipping system update, make sure your system is up to date." \
        requirements_${__type}_update_system "$@" || return $?
    fi
  fi
}

__rvm_requirements_run_custom()
{
  if
    is_a_function requirements_${__lib_type}_install_custom
  then
    rvm_requiremnts_fail_or_run_action 2 \
      "Skipping ${packages_custom[*]} installation, make sure listed packages are installed." \
      "requirements_${__lib_type}_install_custom" "${packages_custom[@]}" || return $?
  else
    typeset __package
    for __package in "${packages_custom[@]}"
    do
      rvm_requiremnts_fail_or_run_action 2 \
        "Skipping ${__package} installation, make sure ${__package} is installed." \
        "requirements_${__lib_type}_install_${__package}" || return $?
    done
  fi
}

__rvm_requirements_run_install()
{
  (( ${#packages_to_install[@]} == 0 )) ||
  {
    _list="${packages_to_install[*]}"
    __rvm_log_command package_install_${_list// /_} "Installing required packages: ${_list// /, }." \
      "requirements_${__lib_type}_libs_install" "${packages_to_install[@]}" ||
      return $?
  }
}

__rvm_requirements_run_after()
{
  if
    is_a_function requirements_${__lib_type}_after
  then
    requirements_${__lib_type}_after "$@" || return $?
  elif
    is_a_function requirements_${__type}_after
  then
    requirements_${__type}_after "$@" || return $?
  fi
  true # for osx
}

requirements_check()
{
  typeset _package_name _list
  if
    is_a_function "requirements_${__lib_type}_lib_installed_all_missing" "$@"
  then
    __rvm_filter_installed_package_from_missing "requirements_${__lib_type}_lib_installed_all_missing" "$@"
  else
    for _package_name in "$@"
    do __rvm_filter_installed_package_check "requirements_${__lib_type}_lib_installed" "${_package_name}"
    done
  fi
}

requirements_check_custom()
{
  typeset __package
  for __package
  do
    __rvm_which "${__package}" >/dev/null || packages_custom+=( "${__package}" )
  done
}

__rvm_filter_installed_package_from_missing()
{
  packages_missing=( $( "$@" ) )
  shift # remove callback function name

  typeset __package
  for __package
  do
    [[ " ${packages_missing[*]} " =~ " ${__package} " ]] || packages_installed+=( "${__package}" )
  done
  case "$rvm_autolibs_flag_number" in
    (0|1|2) # just ignore
      true
      ;;
    (*) # 2+
      packages_to_install=( "${packages_missing[@]}" )
      packages_missing=()
      ;;
  esac
}

__rvm_filter_installed_package_check()
{
  if
    "$1" "$2"
  then
    packages_installed+=( "$2" )
  else
    case "$rvm_autolibs_flag_number" in
      (0|1|2) packages_missing+=( "$2" ) ;; # just ignore
      (*)  packages_to_install+=( "$2" ) ;; # 2+
    esac
  fi
}

requirements_fallback_lib_available()
{
  for __package
  do
    if
      requirements_${__lib_type}_lib_available "${__package}"
    then
      __available_dependencies+=( "${__package}" )
    fi
  done
  __available_dependencies+=( "$1" )
}

requirements_fallback_lib_installed()
{
  for __package
  do
    if
      requirements_${__lib_type}_lib_installed "${__package}"
    then
      requirements_check "${__package}"
      return 0
    fi
  done
  requirements_check "$1"
}

requirements_check_fallback()
{
  typeset -a __available_dependencies
  __available_dependencies=()
  typeset __package
  requirements_fallback_lib_available "$@"
  requirements_fallback_lib_installed "${__available_dependencies[@]}"
}

requirements_version_minimal()
{
  if [[ " ${packages_to_install[*]} " =~ " $1 " ]]
  then return 0
  fi
  typeset latest_version="$(
    requirements_${__lib_type}_version_list $1 | __rvm_version_sort | tail -n 1
  )"
  if
    [[ -z "${latest_version}" ]] ||
    __rvm_version_compare ${latest_version} -lt $2
  then
    packages_to_install+=( $1 )
  fi
}

rvm_requiremnts_fail()
{
  rvm_$1 "$2
RVM autolibs is now configured with mode '2' => 'check and stop if missing',
please run \`rvm autolibs enable\` to let RVM do its job or run and read \`rvm autolibs [help]\`
or visit https://rvm.io/rvm/autolibs for more information."
}

rvm_requiremnts_fail_or_run_action()
{
  case "${rvm_autolibs_flag_number}" in
    (0) rvm_debug "$2" ;;
    (1) rvm_warn  "$2" ;;
    (2)
      if
        (( $1 <= 2 ))
      then
        rvm_requiremnts_fail error "$2"
        return 1
      else
        rvm_requiremnts_fail warn "$2"
      fi
      ;;
    (*)
      shift 2
      "$@" || return $?
      ;;
  esac
  true # for osx
}
