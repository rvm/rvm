#!/usr/bin/env bash

requirements_find_osx_port()
{
  if # find macports in PATH
    \which port >/dev/null 2>&1
  then
    return 0
  else # find macports out of PATH and link to rvm/bin
    typeset __binary
    for __binary in ~/opt/local/bin/port ~/.opt/local/bin/port /usr/local/bin/port /opt/local/bin/port
    do
      if
        [[ -f "${__binary}" && -s "${__binary}" && -x "${__binary}" ]]
      then
        # link to rvm_bin for easy adding to PATH
        ln -nfs "${__binary}" "${rvm_bin_path:-$rvm_path/bin}/port"
        return 0
      fi
    done
    return 1
  fi
}

requirements_osx_port_lib_installed()
{
  __rvm_array_contains "$1" "${packages_available[@]}" || return $?
}

requirements_osx_port_libs_install()
{
  __rvm_try_sudo port install "$@" ||
  {
    typeset ret=$?
    # TODO: offer more help!
    rvm_warn "There were package installation errors, make sure to read the log."
    return $ret
  }
}

requirements_osx_port_libs_default()
{
  port_libs=(
    autoconf automake libtool pkgconfig
  )
  case "$1" in
    (*-head) __rvm_which git >/dev/null || port_libs+=( git )
      ;;
  esac
  # install gcc-4.2 only if not yet available
  if
    __rvm_compiler_is_llvm
  then
    port_libs+=( apple-gcc42 )
  fi
  port_libs+=(
    libiconv libyaml libffi readline libxml2 libxslt libksba openssl curl-ca-bundle sqlite3 zlib ncurses gdbm
  )
  requirements_check "${port_libs[@]}" || return $?
}

requirements_osx_port_update_system()
{
  __rvm_try_sudo port -dv selfupdate || return $?
}

requirements_osx_port_define()
{
  case "$1" in
    (rvm)
      true
      ;;
    (jruby*head)
      __rvm_which git >/dev/null || requirements_check git
      requiremnts_osx_java_fail  || return $?
      ;;
    (jruby*)
      requiremnts_osx_java_fail || return $?
      ;;
    (ir*)
      which mono >/dev/null 2>&1 || return $?
      ;;
    (opal)
      requirements_osx_port_libs_ensure node
      ;;
    (*-head)
      __rvm_which git >/dev/null || requirements_check git
      requirements_osx_port_libs_default "$1"
      ;;
    (*)
      requirements_osx_port_libs_default "$1"
      ;;
  esac
}

requirements_osx_port_after()
{
  __rvm_update_configure_opt_dir "$1" "/opt/local" || return $?
  unset packages_available port_libs

  rvm_requiremnts_fail_or_run_action 2 \
    "Skipping certificates update, make sure your certificates are up to date." \
    requirements_osx_update_openssl_cert "$(fink --prefix openssl)/bin/openssl" || return $?
}


requirements_osx_port_install_port()
{
  typeset macports_version
  macports_version="$(
    __rvm_curl https://distfiles.macports.org/MacPorts/ |
    grep -Eo "<a href=\"MacPorts-[[:digit:]\.]+.tar.bz2\">" |
    awk -F'"' '{print $2}' | sort | tail -n 1
  )" #'
  macports_version="${macports_version%.tar.bz2}"
  : macports_version:${macports_version:=MacPorts-2.1.3}
  mkdir "${rvm_src_parth}/${macports_version}"
  cd    "${rvm_src_parth}/${macports_version}"
  __rvm_curl -O "https://distfiles.macports.org/MacPorts/${macports_version}.tar.bz2" | tar -xj --strip 1
  __rvm_check_pipestatus ${PIPESTATUS[@]} ${pipestatus[@]} || return $?
  ./configure &&
  make &&
  __rvm_try_sudo make install ||
  return $?
}

requirements_osx_port_ensure_port_available()
{
  which port >/dev/null ||
  {
    rvm_requiremnts_fail_or_run_action 2 \
      "Requested installation with macports libs, but macports is not available." \
      __rvm_log_command port_install "Installing macports" requirements_osx_port_install_port ||
      return $?
  }
}

requirements_osx_port_before()
{
  requirements_osx_port_ensure_port_available || return $?

  typeset -ax packages_available port_libs

  __rvm_read_lines packages_available <(
    port -q installed active | awk '{print $1}'
  )
}
