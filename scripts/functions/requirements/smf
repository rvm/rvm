#!/usr/bin/env bash

requirements_find_smf()
{
  if # find SMF in PATH
    \which sm >/dev/null 2>&1
  then
    return 0
  else # find SMF out of PATH and link to rvm/bin
    typeset __binary
    for __binary in ~/.sm/bin/sm /opt/sm/bin/sm
    do
      if
        [[ -f "${__binary}" && -s "${__binary}" && -x "${__binary}" ]]
      then
        # link to rvm_bin for easy adding to PATH
        ln -nfs "${__binary}" "${rvm_bin_path:-$rvm_path/bin}/sm"
        return 0
      fi
    done
    return 1
  fi
}

__smf_try_sudo()
{
  if [[ -w "$( which sm )" ]]
  then "$@"
  else __rvm_try_sudo "$@"
  fi
}

requirements_smf_lib_installed()
{
  sm pkg list | GREP_OPTIONS="" \grep "^${1}:" >/dev/null || return $?
}

requirements_smf_libs_install()
{
  while
    (( $# ))
  do
    __smf_try_sudo sm $1 install ||
    {
      typeset ret=$?
      rvm_warn "There were package installation errors, make sure to read the log.
You can get help using IRC: http://webchat.freenode.net/?channels=rvm"
      return $ret
    }
    shift
  done
}

requirements_smf_gcc_42_check()
{
  case "$1" in
    (ruby-2*|ruby-head) true ;; # ruby-2.0.0+ is supposed to work with clang
    (*)
      # install gcc-4.2 only if not yet available, prevents problems with gcc-4.2 on OSX 10.6
      if
        ! __rvm_which gcc-4.2 >/dev/null &&
        __rvm_compiler_is_llvm
      then
        rvm_error "SM Framework does not know how to install gcc-4.2, please install osx-gcc-installer first for older rubies."
      fi
      ;;
  esac
}

requirements_smf_after()
{
  rvm_requiremnts_fail_or_run_action 2 \
    "Skipping certificates update, make sure your certificates are up to date." \
    requirements_osx_update_openssl_cert "${__sm_path%/bin/sm}/pkg/active/bin/openssl" || return $?
}

requirements_smf_update_system()
{
  __smf_try_sudo sm get head &&
  __smf_try_sudo sm set install all ||
  return $?
}

requirements_smf_define()
{
  case "$1" in
    (rvm)
      true
      ;;
    (jruby*head)
      requirements_check git
      which java >/dev/null 2>&1 || return $?
      ;;
    (jruby*)
      which java >/dev/null 2>&1 || return $?
      ;;
    (ir*)
      which mono >/dev/null 2>&1 || return $?
      ;;
    (opal)
      requirements_check node
      ;;
    (*-head)
      requirements_check autoconf automake pkg-config libtool libyaml zlib ncurses readline openssl libxml2 libxslt sqlite3 git
      __rvm_update_configure_opt_dir "$1" "${__sm_path%/bin/sm}/pkg/active"
      requirements_smf_gcc_42_check || return $?
      ;;
    (*)
      requirements_check autoconf automake pkg-config libtool libyaml zlib ncurses readline openssl libxml2 libxslt sqlite3
      __rvm_update_configure_opt_dir "$1" "${__sm_path%/bin/sm}/pkg/active"
      requirements_smf_gcc_42_check || return $?
      ;;
  esac
}

requirements_smf_install_sm()
{
  rvm_error "SMF Framework support is only intended for RailsInstaller, please use Homebrew integration instead."
  return 100
}

requirements_smf_ensure_smf_available()
{
  which sm >/dev/null ||
  {
    rvm_requiremnts_fail_or_run_action 2 \
      "Requested installation with SM Framework, but SM Framework is not available." \
      __rvm_log_command smf_install "Installing SM Framework" requirements_smf_install_sm ||
      return $?
  }
}

requirements_smf_find_sm()
{
  export __sm_path
  : __sm_path:${__sm_path:=$( which sm )}
  while [[ -n "${__sm_path}" && -L "${__sm_path}" ]]
  do __sm_path="$( readlink "${__sm_path}" )"
  done
  [[ -n "${__sm_path}" ]] || return $?
}

requirements_smf_before()
{
  requirements_smf_ensure_smf_available || return $?
  requirements_smf_find_sm              || return $?
}
