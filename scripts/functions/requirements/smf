#!/usr/bin/env bash

requirements_find_smf()
{
  if # find SMF in PATH
    __rvm_which sm >/dev/null 2>&1
  then
    return 0
  else # find SMF out of PATH and link to rvm/bin
    typeset __binary
    for __binary in ~/.sm/bin/sm /opt/sm/bin/sm
    do
      if
        [[ -f "${__binary}" && -s "${__binary}" && -x "${__binary}" ]]
      then
        # link to rvm_bin for easy adding to PATH
        ln -nfs "${__binary}" "${rvm_bin_path:-$rvm_path/bin}/sm"
        return 0
      fi
    done
    return 1
  fi
}

__smf_try_sudo()
{
  if [[ -w "$( __rvm_which sm )" ]]
  then "$@"
  else __rvm_try_sudo "$@"
  fi
}

requirements_smf_lib_installed()
{
  sm pkg list | __rvm_grep "^${1}:" >/dev/null || return $?
}

requirements_smf_lib_install_command()
{
  __smf_install_command=( sm "$1" install )
  if
    [[ "${rvm_static_flag:-}" == "1" ]]
  then
    __smf_install_command=(
      /usr/bin/env CFLAGS="-fPIC" LDFLAGS="-fPIC" "${__smf_install_command[@]}" static
    )
  fi
  __smf_install_command=( __smf_try_sudo "${__smf_install_command[@]}" )
}

requirements_smf_lib_install()
{
  typeset -a __smf_install_command
  requirements_smf_lib_install_command "$@"
  rvm_debug "__smf_install_command: ${__smf_install_command[*]};"
  "${__smf_install_command[@]}" ||
  {
    typeset ret=$?
    rvm_warn "There were package installation errors with SM Framework, make sure to read the log.
If you see this on OSX, then you might want to try macports (http://www.macports.org/) or homebrew (http://mxcl.github.io/homebrew/) and tell RVM to use them by running:

    rvm autolibs macports #OR
    rvm autolibs homebrew

You can get help using IRC: http://webchat.freenode.net/?channels=rvm"
    return $ret
  }
  shift
}

requirements_smf_gcc_42_check()
{
  case "$1" in
    (ruby-2*|ruby-head) true ;; # ruby-2.0.0+ is supposed to work with clang
    (*)
      # install gcc-4.2 only if not yet available, prevents problems with gcc-4.2 on OSX 10.6
      if
        ! __rvm_which gcc-4.2 >/dev/null &&
        __rvm_compiler_is_llvm
      then
        rvm_error "SM Framework does not know how to install gcc-4.2, please install osx-gcc-installer first for older rubies."
      fi
      ;;
  esac
}

requirements_smf_install_extension_sets()
{
  typeset __set
  for __set
  do __smf_try_sudo sm set install "${__set}" || return $?
  done
}

requirements_smf_update_system()
{
  __rvm_log_command sm_get_head "Updating SMF" \
    __smf_try_sudo sm get head ||
    return $?
  if
    [[ "${#required_extension_sets[@]}" -gt 0 ]]
  then
    __rvm_log_command sm_install_extension_sets "Installing/updating extension sets: ${required_extension_sets[*]}" \
      requirements_smf_install_extension_sets "${required_extension_sets[@]}" ||
      return $?
  fi
}

requirements_smf_define()
{
  case "$1" in
    (rvm)
      true
      ;;
    (jruby*)
      if
        is_head_or_disable_binary "$1"
      then
        required_extension_sets+=( vcs )
        requirements_check git
        if is_jruby_post17 "$1"
        then requirements_check_custom_after mvn=maven
        else __rvm_which ant >/dev/null 2>&1 || return $?
        fi
      fi
      __rvm_which java >/dev/null 2>&1 || return $?
      ;;
    (ir*)
      __rvm_which mono >/dev/null 2>&1 || return $?
      ;;
    (opal)
      required_extension_sets+=( javascript )
      requirements_check node
      ;;
    (*-head)
      required_extension_sets+=( vcs )
      requirements_check git
      requirements_smf_define default
      ;;
    (*)
      # TODO: ruby up to 1.9.3 requires openssl 0.9.8 on OSX
      required_extension_sets+=( databases gnu libraries tools )
      requirements_check pkg-config libtool libyaml zlib ncurses readline openssl sqlite3 gdbm
      [[ "${__system_name}" == "OSX" ]] || requirements_check ncursesw
      ;;
  esac
}

requirements_smf_install_sm()
{
  rvm_error "SMF Framework support is only intended for RailsInstaller / Tokaido.app, please use Macports / Homebrew integration instead."
  return 100
}

requirements_smf_ensure_smf_available()
{
  __rvm_which sm >/dev/null ||
  {
    rvm_requiremnts_fail_or_run_action 2 \
      "Requested installation with SM Framework, but SM Framework is not available." \
      requirements_smf_install_sm ||
      return $?
  }
}

requirements_smf_find_sm()
{
  export __sm_path
  : __sm_path:${__sm_path:=$( __rvm_which sm )}
  while [[ -n "${__sm_path}" && -L "${__sm_path}" ]]
  do __sm_path="$( __rvm_readlink "${__sm_path}" )"
  done
  [[ -n "${__sm_path}" ]] || return $?
}

requirements_smf_before()
{
  export -a required_extension_sets
  required_extension_sets=()
  requirements_smf_ensure_smf_available || return $?
  requirements_smf_find_sm              || return $?
}

requirements_smf_after()
{
  requirements_smf_gcc_42_check "$1" || return $?

  if
    [[ "${_system_name}" == "OSX" ]]
  then
    __rvm_update_configure_env \
      LDFLAGS="-Z -L${__sm_path%/bin/sm}/pkg/active/lib -L/usr/lib" \
      CFLAGS="-I${__sm_path%/bin/sm}/pkg/active/include"
  fi

  case "$PATH" in
   (${__sm_path%/bin/sm}/pkg/active/bin:*)
     true
     ;;
   (*)
     __rvm_add_to_path prepend "${__sm_path%/bin/sm}/pkg/active/bin"
     ;;
  esac

  export PKG_CONFIG_PATH="${__sm_path%/bin/sm}/pkg/active/lib/pkgconfig"

  rvm_requiremnts_fail_or_run_action 2 \
    "Skipping certificates update, make sure your certificates are up to date." \
    requirements_osx_update_openssl_cert "${__sm_path%/bin/sm}/pkg/active/bin/openssl" || return $?
}
