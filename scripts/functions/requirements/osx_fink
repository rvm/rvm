#!/usr/bin/env bash

requirements_find_osx_fink()
{
  if # find macports in PATH
    \which fink >/dev/null 2>&1
  then
    return 0
  else # find fink out of PATH and link to rvm/bin
    typeset __binary
    for __binary in ~/sw/bin/fink ~/.sw/bin/fink /usr/local/bin/fink /sw/bin/fink
    do
      if
        [[ -f "${__binary}" && -s "${__binary}" && -x "${__binary}" ]]
      then
        # link to rvm_bin for easy adding to PATH
        ln -nfs "${__binary}" "${rvm_bin_path:-$rvm_path/bin}/fink"
        return 0
      fi
    done
    return 1
  fi
}

requirements_osx_fink_lib_installed()
{
  fink list -i "^${1}$" || return $?
}

requirements_osx_fink_libs_install()
{
  fink install "$@"  ||
  {
    typeset ret=$?
    # FIXME: how to install fink ?
    rvm_warn "There were package installation errors, make sure to read the log."
    return $ret
  }
}

requirements_osx_fink_libs_default()
{
  # FIXME: what packages are needed for installation
  fink_libs=(
    autoconf automake libtool pkg-config
  )
  if
    ! __ruby_clang_ok "$1" &&
    [[ -z "${selected_compiler}" || "${selected_compiler}" =~ "gcc-4.2" ]]
  then
    # install gcc-4.2 only if not yet available, prevents problems with gcc-4.2 on OSX 10.6
    __rvm_which gcc-4.2 >/dev/null || fink_libs+=( gcc4.2 )
  fi
  fink_libs_conf=(
    libyaml readline6 readline6-shlibs libxml2 libxslt libksba8 openssl100-dev openssl100-shlibs ca-bundle sqlite3
  )
  requirements_check "${fink_libs[@]}" "${fink_libs_conf[@]}" || return $?
}

requirements_osx_fink_define()
{
  case "$1" in
    (rvm)
      true
      ;;
    (jruby*head)
      __rvm_which git >/dev/null || requirements_check git
      requiremnts_osx_java_fail  || return $?
      ;;
    (jruby*)
      requiremnts_osx_java_fail  || return $?
      ;;
    (ir*)
      which mono >/dev/null 2>&1 || return $?
      ;;
    (opal)
      requirements_check node
      ;;
    (*-head)
      __rvm_which git >/dev/null || requirements_check git
      requirements_osx_fink_libs_default "$1"
      ;;
    (*)
      requirements_osx_fink_libs_default "$1"
      ;;
  esac
}

requirements_osx_fink_libs_configure()
{
  typeset package fink_lib fink_lib_prefix
  package="$1"
  shift

  for fink_lib
  do
    if
      # FIXME: how to find out package paths
      fink_lib_prefix="$( fink --prefix "${fink_lib}" 2>/dev/null )" &&
      [[ -n "${fink_lib_prefix}" && -d "${fink_lib_prefix}" ]]
    then
      __rvm_update_configure_opt_dir "${package}" "${fink_lib_prefix}"
    fi
  done
}

requirements_osx_fink_after()
{
  requirements_osx_fink_libs_configure "$1" "${fink_libs_conf[@]}" || return $?
  unset fink_libs fink_libs_conf

  rvm_requiremnts_fail_or_run_action 2 \
    "Skipping certificates update, make sure your certificates are up to date." \
    requirements_osx_update_openssl_cert "$(fink --prefix openssl)/bin/openssl" || return $?
}

requirements_osx_fink_install_fink()
{
  typeset fink_home
  if (( UID == 0 ))
  then fink_home="/usr/local"
  else fink_home="$HOME/.fink"
  fi
  mkdir -p "${fink_home}" || return $?
  # FIXME: install fink
  return 1
  chmod +x "${fink_home}/bin/fink" # just in case
  # link to rvm_bin for easy adding to PATH
  ln -nfs "${fink_home}/bin/fink" "${rvm_bin_path:-$rvm_path/bin}/fink"
}

requirements_osx_fink_ensure_fink_available()
{
  which fink >/dev/null ||
  {
    rvm_requiremnts_fail_or_run_action 2 \
      "Requested installation with fink libs, but fink is not available." \
      __rvm_log_command fink_install "Installing fink" requirements_osx_fink_install_fink ||
      return $?
  }
}

requirements_osx_fink_ensure_fink_can_install()
{
  # only check for 3+ (packages install, enabled)
  (( rvm_autolibs_flag_number > 2 )) || return 0

  typeset __packages_path
  __packages_path="$(grep -E '^Basepath:' /sw/etc/fink.conf | sed -E 's/Basepath:\s?(.+)$/\1/')"
  if
    [[ -w "${__packages_path%/*}/bin" ]] &&
    [[ -w "${__packages_path}" || ! -e "${__packages_path}" ]]
  then
    rvm_debug "fink seems to be writable"
  else
    rvm_error "ERROR: '${__packages_path}' not writable, fix it first!"
    return 1
  fi
}

requirements_osx_fink_before()
{
  typeset -ax fink_libs fink_libs_conf
  requirements_osx_fink_ensure_fink_available   || return $?
  requirements_osx_fink_ensure_fink_can_install || return $?
}
