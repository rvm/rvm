#!/usr/bin/env bash

# show the user selected compiler or return 1
__rvm_selected_compiler()
{
  #TODO: add handling for rvm_configure_env
  if
    [[ " ${rvm_configure_flags[*]}" =~ " --with-gcc=" ]]
  then
    typeset __compiler
    for __compiler in "${rvm_configure_flags[@]}"
    do
      case "$__compiler" in
        (--with-gcc=*)
          echo "${__compiler#--with-gcc=}"
          return 0
          ;;
      esac
    done
  elif
    [[ -n "${CC:-}" ]]
  then
    echo "${CC}"
    return 0
  fi
  if # autoselect on osx as there is no standard
    __rvm_find_osx_gcc42 &&
    [[ -n "${CC:-}" ]]
  then
    echo "$CC"
    return 0
  fi
  return 1
}

__rvm_found_compiler()
{
  __rvm_selected_compiler || \which gcc 2>/dev/null
}

__rvm_fix_gcc_path()
{
  typeset __config_file __cc_value __cc_new
  __rvm_which $(
    "$rvm_ruby_home/bin/ruby" -rrbconfig -e 'puts RbConfig::CONFIG["CC"]||"true"' 2>/dev/null
  ) >/dev/null 2>/dev/null ||
  {
    __cc_value="$( "$rvm_ruby_home/bin/ruby" -rrbconfig -e 'puts RbConfig::CONFIG["CC"]' 2>/dev/null )"
    if
      __config_file="$( find $rvm_ruby_home/ -name rbconfig.rb )" &&
      GREP_OPTIONS="" \grep "CONFIG\[\"CC\"\]" "${__config_file}" >/dev/null
    then
      __cc_new="$( __rvm_found_compiler )"
      rvm_debug "Fixing ruby compiler from '${__cc_value}' to '${__cc_new}'."
      __rvm_sed_i "${__config_file}" \
        -e "s#CONFIG\[\"CC\"\].*\$#CONFIG[\"CC\"] = ENV[\"CC\"] || \"${__cc_new}\"#"
    else
      rvm_warn "Installed ruby contains path to non existing compiler '${__config_file}', compiling native gems might be impossible."
    fi
  }
}

__rvm_run_compiler()
{
  typeset compiler
  if
    compiler="$( __rvm_found_compiler )"
  then
    if [[ -n "${ZSH_VERSION:-}" ]]
    then ${=compiler} "$@" || return $?
    else ${compiler}  "$@" || return $?
    fi
  else
    return 1
  fi
}

__rvm_compiler_is_llvm()
{
  __rvm_found_compiler >/dev/null &&
  [[ "$(__rvm_run_compiler --version)" =~ "llvm" ]] ||
  return $?
}

__rvm_compiler_is_gcc47()
{
  __rvm_found_compiler >/dev/null &&
  [[ "$(__rvm_run_compiler -dumpversion)" =~ "4.7" ]] ||
  return $?
}

__rvm_setup_compile_environment()
{
  typeset __type
  for __type in osx_gcc osx_architectures gcc47 smartos openbsd shared_static
  do
    __rvm_setup_compile_environment_${__type} "$1"
  done
  rvm_debug "found compiler: $( __rvm_found_compiler )"
}

__rvm_update_configure_env()
{
  typeset -a local_configure_env
  typeset _variable _value _iterator _found
  rvm_debug "__rvm_update_configure_env($#):$*:"
  while (( $# ))
  do
    _variable="${1%%\=*}"
    _value="${1#*=}"
    shift
    __rvm_array_add_or_update rvm_configure_env "$_variable=" " " "$_value"
  done
}

__rvm_update_configure_opt_dir()
{
  case "$1" in
    (ruby-head*|ruby-2*)
      __rvm_update_configure_opt_dir_option "$2"
      ;;
    (ruby-1.9.3-p*)
      typeset __patchlevel
      __patchlevel="${1##ruby-1.9.3-p}"
      if
        (( __patchlevel < 297 ))
      then
        rvm_patch_names+=( cflags )
        __rvm_update_configure_opt_dir_option_or_flags "$2"
      else
        __rvm_update_configure_opt_dir_option "$2"
      fi
      ;;
    (ruby-1.9*)
      __rvm_update_configure_opt_dir_option_or_flags "$2"
      ;;
    (*)
      __rvm_update_configure_opt_dir_flags "$2"
      ;;
  esac
}

__rvm_update_configure_opt_dir_option()
{
  rvm_debug "rvm_configure_flags+=( --with-opt-dir=$1 )"
  __rvm_array_add_or_update rvm_configure_flags --with-opt-dir= : "$1"
}

__rvm_update_configure_opt_dir_option_or_flags()
{
  # Use option if first time - use flags if option available already
  case " ${rvm_configure_flags[*]} " in
    (*[[:space:]]--with-opt-dir=*)
      __rvm_update_configure_opt_dir_flags "$@"
      ;;
    (*)
      __rvm_update_configure_opt_dir_option "$@"
      ;;
  esac
}

__rvm_update_configure_opt_dir_flags()
{
  typeset __enable_rpath __lib_path
  if
    which bash | xargs head -n 1 | cat -e | grep -b '^^?ELF' >/dev/null
  then
    __enable_rpath="true"
  fi
  __rvm_update_configure_env CFLAGS="-I$1/include"
  __rvm_update_configure_env LDFLAGS="-L$1/lib"
  [[ -z "${__enable_rpath:-}" ]] ||
    __rvm_update_configure_env LDFLAGS="-Wl,-rpath,$1/lib"
  if [[ -d "$1/lib64" ]]
  then
    __rvm_update_configure_env LDFLAGS="-L$1/lib64"
    [[ -z "${__enable_rpath:-}" ]] ||
      __rvm_update_configure_env LDFLAGS="-Wl,-rpath,$1/lib64"
  fi
}

__rvm_find_osx_gcc42()
{
  if
    [[ "Darwin" == "$(uname)" ]]
  then
    export CC
    # override CC if gcc-4.2 available (OSX)
    if
      [[ -x /usr/local/bin/gcc-4.2 ]] # HomeBrew
    then
      CC=/usr/local/bin/gcc-4.2
    elif
      [[ -x /opt/local/bin/gcc-apple-4.2 ]] # MacPorts
    then
      CC=/opt/local/bin/gcc-apple-4.2
    elif
      __rvm_which gcc-apple-4.2 > /dev/null # MacPorts via PATH
    then
      CC=gcc-apple-4.2
    elif
      __rvm_which gcc-4.2 > /dev/null # Any gcc-4.2
    then
      CC=gcc-4.2
    elif
      [[ -x /usr/bin/gcc-4.2 ]] # OSX-GCC-Installer / Xcode - might be LLVM
    then
      CC=/usr/bin/gcc-4.2
    else
      return 1
    fi
  fi
}

__rvm_setup_compile_environment_osx_gcc()
{
  __rvm_selected_compiler > /dev/null || __rvm_find_osx_gcc42

  if __rvm_array_contains "*debug*" "${rvm_patch_names[@]}"
  then rvm_force_autoconf_flag=1
  fi
}

__rvm_setup_compile_environment_osx_architectures()
{
  [[ -n "${rvm_architectures:-}" ]] || return 0

  typeset architectures architecture
  typeset -a _local_osx_env

  # Ruby 1.9.x supports the easy way
  case "$1" in
  ruby-1.9*|ruby-2*|ruby-head*)
    rvm_configure_flags+=( --with-arch="${rvm_architectures}" )
    ;;
  libyaml*)
    for architecture in ${rvm_architectures//,/ }
    do architectures="${architectures} -arch ${architecture}"
    done

    _local_osx_env=(
      CFLAGS="${architectures} -O3"
      CCFLAGS="${architectures} -O3"
      CXXFLAGS="${architectures} -O3"
      LDFLAGS="${architectures}"
    )
    __rvm_update_configure_env "${_local_osx_env[@]}"
    rvm_configure_flags+=( --disable-dependency-tracking )
    ;;
  *)
    for architecture in ${rvm_architectures//,/ }
    do architectures="${architectures} -arch ${architecture}"
    done

    _local_osx_env=(
      MACOSX_DEPLOYMENT_TARGET="$( sw_vers -productVersion | awk -F'.' '{print $1"."$2}' )"
      CFLAGS="${architectures} -g -Os -pipe -no-cpp-precomp"
      CCFLAGS="${architectures} -g -Os -pipe"
      CXXFLAGS="${architectures} -g -Os -pipe"
      LDFLAGS="${architectures} -bind_at_load"
      LDSHARED="cc ${architectures} -dynamiclib -undefined suppress -flat_namespace"
    )
    __rvm_update_configure_env "${_local_osx_env[@]}"
    __rvm_array_contains "*osx-arch-fix*" "${rvm_patch_names[@]}" || rvm_patch_names+=( osx-arch-fix )
    ;;
  esac
}

__rvm_setup_compile_environment_gcc47()
{
  __rvm_compiler_is_gcc47 || return 0
  __rvm_string_match "$1" "ruby-1.8.*" "ree*" || return 0

  # -g -O2 from 1.8.7-p370 is not enough, need all the flags to fix it
  __rvm_update_configure_env CFLAGS="-O2 -fno-tree-dce -fno-optimize-sibling-calls"
}

__rvm_setup_compile_environment_smartos()
{
  [[ "$(uname -v)" =~ ^joyent ]] || return 0
  __rvm_update_configure_opt_dir "$1" "/opt/local" # TODO do we needed the next line?
  __rvm_update_configure_env CCFLAGS="-I/opt/local/include"
  __rvm_add_to_path prepend "/opt/local/gnu/bin"
}

__rvm_setup_compile_environment_openbsd()
{
  [[ "$(uname)" == "OpenBSD"     ]] || return 0
  if
    [[  -z "${AUTOCONF_VERSION:-}" ]]
  then
    export AUTOCONF_VERSION
    AUTOCONF_VERSION="$( ls -1 /usr/local/bin/autoreconf-* | sort | tail -n 1 )"
    AUTOCONF_VERSION="${AUTOCONF_VERSION##*-}"
  fi
  if
    [[  -z "${AUTOMAKE_VERSION:-}" ]]
  then
    export AUTOMAKE_VERSION
    AUTOMAKE_VERSION="$( ls -1 /usr/local/bin/automake-* | sort | tail -n 1 )"
    AUTOMAKE_VERSION="${AUTOMAKE_VERSION##*-}"
  fi
}

__rvm_setup_compile_environment_shared_static()
{
  # skip it if something already set
  case "${rvm_configure_flags[*]}" in
    (*--enable-shared*|*--disable-shared*|*--enable-static*|*--disable-static*) return 0 ;;
  esac
  case "$(uname)" in
    (Darwin)
      # OSX does not have a default package manager, shared is not wanted feature.
      case "$1" in
        (openssl*)
          rvm_configure_flags+=( no-shared )
          ;;
        (*)
          rvm_configure_flags+=( --disable-shared )
          ;;
      esac
      ;;
    (*)
      case "$1" in
        (openssl*)
          rvm_configure_flags+=( shared )
          ;;
        (readline*)
          rvm_configure_flags+=( --disable-static --enable-shared ) 
          ;;
        (*)
          rvm_configure_flags+=( --enable-shared )
          ;;
      esac
      ;;
  esac
}

__rvm_check_for_compiler()
{
  if __rvm_selected_compiler > /dev/null &&
    ! builtin command -v $(__rvm_selected_compiler) >/dev/null
  then
    rvm_error "You requested building with '$(__rvm_selected_compiler)' but it is not in your path."
    return 1
  fi
}

# Checks for bison, returns zero iff it is found
__rvm_check_for_bison()
{
  true ${rvm_head_flag:=0}
  if (( rvm_head_flag > 0 ))
  then
    if ! builtin command -v bison > /dev/null
    then
      rvm_error "\nbison is not available in your path. \nPlease ensure bison is installed before compiling from head.\n"
      return 1
    fi
  fi
}

__rvm_mono_env()
{
  DYLD_LIBRARY_PATH="${rvm_usr_path}/lib:$DYLD_LIBRARY_PATH"
  C_INCLUDE_PATH="${rvm_usr_path}/include:$C_INCLUDE_PATH"
  ACLOCAL_PATH="${rvm_usr_path}/share/aclocal"
  ACLOCAL_FLAGS="-I $ACLOCAL_PATH"
  PKG_CONFIG_PATH="${rvm_usr_path}/lib/pkgconfig:$PKG_CONFIG_PATH"

  export  DYLD_LIBRARY_PATH C_INCLUDE_PATH ACLOCAL_PATH ACLOCAL_FLAGS PKG_CONFIG_PATH

  __rvm_add_to_path prepend "${rvm_usr_path}/bin"

  builtin hash -r

  return 0
}

# Returns all mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_rubies()
{
  typeset versions _ruby
  versions="${1:-"1.8.|ree|1.9."}"
  for _ruby in $( find $rvm_rubies_path/ -maxdepth 1 -mindepth 1 -type d -not -type l )
  do
    printf "%b" "${_ruby##*/}\n"
  done | GREP_OPTIONS="" \grep -E "$versions"
}

# Returns the first mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_ruby()
{
  typeset versions
  versions="${1:-"1.8.|ree|1.9."}"
  _mri_rubies=( $( __rvm_mri_rubies "$versions" ) )
  _current_ruby=$(__rvm_env_string)
  if [[ " ${_mri_rubies[*]} " =~ " ${_current_ruby} " ]]
  then
    printf "%b" "${_current_ruby}\n"
  else
    for _ruby in ${_mri_rubies[@]}
    do
      printf "%b" "${_ruby}\n"
    done | sort | head -n 1
  fi
  return 0
}

__rvm_ensure_has_mri_ruby()
{
  typeset versions
  versions="${1:-"1.8.|ree|1.9."}"
  if [[ -z "$(__rvm_mri_ruby $versions)" ]]
  then
    typeset compat_result
    compat_result=0
    if ! ( "$rvm_bin_path"/rvm install 1.8.7 )
    then
      rvm_error "
To proceed rvm requires a 1.8-compatible ruby is installed.
We attempted to install 1.8.7 automatically but it failed.
Please install it manually (or a compatible alternative) to proceed.
"
      compat_result=1
    fi
    return $compat_result
  fi

  return 0
}

__rvm_is_enough_ram()
{
  typeset __required_ram __existing_ram

  __required_ram=$(( $1 * 1024 * 1024 ))

  __existing_ram="$(free -b 2>/dev/null | awk '{if (NR==3) print $4}')"
  : ${__existing_ram:="$(sysctl hw.physmem 2>/dev/null | cut -f 2 -d :)"}
  : __existing_ram: ${__existing_ram:=0}
  rvm_debug "Existing ram $(( __existing_ram /1024 /1024 ))MB."

  (( __existing_ram >= __required_ram )) || return $?
}
