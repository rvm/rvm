#!/usr/bin/env bash

if [[ -z "${rvm_tar_command:-}" ]]
then
  # check for the right tar to use
  if builtin command -v gtar >/dev/null
  then rvm_tar_command=gtar
  else rvm_tar_command=tar
  fi
fi

if [[ ! " ${rvm_tar_options:-} " =~ " --no-same-owner "  ]] && \
  $rvm_tar_command --help 2>&1 | GREP_OPTIONS="" \grep -- --no-same-owner >/dev/null
then
  rvm_tar_options="${rvm_tar_options:-} --no-same-owner"
  rvm_tar_options="${rvm_tar_options## }"
fi

# Functions RVM is built on
# __rvm_string_match <value> <string|glob>
if
 [[ -n "$ZSH_VERSION" ]]
then
  __rvm_string_match()
  {
    typeset _string
    _string="$1"
    shift
    while (( $# ))
    do
      eval "\
      case \"\${_string}\" in\
        ($1) return 0 ;;\
      esac\
      "
      shift
    done
    return 1
  }
else
  __rvm_string_match()
  {
    typeset _string
    _string="$1"
    shift
    while (( $# ))
    do
      case "${_string}" in
        ($1) return 0 ;;
      esac
      shift
    done
    return 1
  }
fi

__rvm_array_contains()
{
  typeset _search _iterator
  _search="$1"
  shift
  for _iterator
  do
    case "${_iterator}" in
      (${_search}) return 0 ;;
    esac
  done
  return 1
}

__rvm_array_add_or_update()
{
  typeset _array_name _variable _separator _value _local_value
  typeset -a _array_value_old _array_value_new

  _array_name="$1"
  _variable="$2"
  _separator="$3"
  _value="$4"
  _array_value_new=()
  eval "_array_value_old=( \"\${${_array_name}[@]}\" )"

  case " ${_array_value_old[*]} " in
    (*[[:space:]]${_variable}*)
      for _local_value in "${_array_value_old[@]}"
      do
        case "${_local_value}" in
          (${_variable}*)
            _array_value_new+=( "${_local_value}${_separator}${_value}" )
            ;;
          (*)
            _array_value_new+=( "${_local_value}" )
            ;;
        esac
      done
      ;;
    (*)
      _array_value_new=( "${_array_value_old[@]}" "${_variable}${_value}" )
      ;;
  esac

  eval "${_array_name}=( \"\${_array_value_new[@]}\" )"
}

# Drop in replacement for sed -i compatible with OpenBSD
# Assumes that filename is the first argument, all others are passed onto sed
__rvm_sed_i()
{
  typeset _filename _executable
  [[ -n "${1:-}" ]] || {
    rvm_debug "no file given for __rvm_sed_i"
    return 0
  }
  _filename="$1"
  shift

  if [[ -x "${_filename}" ]]
  then _executable=true
  fi

  sed "$@" < "${_filename}" > "${_filename}.new"
  \mv "${_filename}.new" "${_filename}"

  if [[ -n "${_executable:-}" ]]
  then chmod +x "${_filename}"
  fi
}

# Drop in replacement for which compatible with OSX / ZSH
__rvm_which()
{
  if command which --skip-alias --skip-functions which >/dev/null 2>&1
  then command which --skip-alias --skip-functions "$@"
  elif command whence whence >/dev/null 2>&1
  then command whence -p "$@"
  elif command which which >/dev/null 2>&1
  then command which "$@"
  elif which which >/dev/null 2>&1
  then which "$@"
  else return 1
  fi
}

is_a_function()
{
  typeset -f $1 >/dev/null 2>&1 || return $?
}

is_parent_of()
{
  typeset name pid ppid pname
  name=$1
  pid=$2
  while [[ -n "$pid" && "$pid" != "0" ]]
  do
    read ppid pname < <(ps -p $pid -o ppid= -o comm=)
    if [[ -n "$ppid" && -n "$pname" ]]
    then
      if [[ "$pname" == "$name" ]]
      then
        echo $pid
        return 0
      else
        pid=$ppid
      fi
    else
      break
    fi
  done
  return 1
}

__function_on_stack()
{
  typeset fun
  for fun in "$@"
  do
    if [[ " ${FUNCNAME[*]} " =~ " $fun " ]]
    then return 0
    fi
  done
  return $#
}
