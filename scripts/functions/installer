#!/usr/bin/env bash

#Handle Solaris Hosts
if [[ "$(uname -s)" == "SunOS" ]] && [[ ! "$(uname -v)" =~ ^joyent ]]
then
  export PATH
  PATH="/usr/gnu/bin:$PATH"
fi

if [[ -n "${rvm_user_path_prefix:-}" ]]
then
  PATH="${rvm_user_path_prefix}:$PATH"
fi

install_setup()
{
  set -o errtrace

  export HOME="${HOME%%+(\/)}" # Remove trailing slashes if they exist on HOME

  case "$MACHTYPE" in
    *aix*) name_opt=-name  ;;
    *)   name_opt=-iname ;;
  esac

  if (( ${rvm_ignore_rvmrc:=0} == 0 ))
  then
    : rvm_stored_umask:${rvm_stored_umask:=$(umask)}

    rvm_rvmrc_files=("/etc/rvmrc" "$HOME/.rvmrc")
    if [[ -n "${rvm_prefix:-}" ]] && ! [[ "$HOME/.rvmrc" -ef "${rvm_prefix}/.rvmrc" ]]
       then rvm_rvmrc_files+=( "${rvm_prefix}/.rvmrc" )
    fi
    for file in "${rvm_rvmrc_files[@]}"
    do
      if [[ -s "$file" ]]
      then
        . $file
      fi
    done
    unset rvm_rvmrc_files
  fi

  export PS4 PATH

  PS4="+ \${BASH_SOURCE##\${rvm_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "

  if [[ -n "${rvm_user_path_prefix:-}" ]]
  then
    PATH="${rvm_user_path_prefix}:$PATH"
  fi

  true ${rvm_group_name:=rvm}

  # TODO: Figure out a much better name for 'rvm_user_install_flag'
  # mpapis: self contained was a quite good name
  if (( UID == 0 )) ||
    [[ -n "${rvm_prefix:-}" && "${rvm_prefix:-}" != "${HOME}" ]]
  then
    true "${rvm_user_install_flag:=0}"
  else
    true "${rvm_user_install_flag:=1}"
  fi
  export rvm_user_install_flag

  unset rvm_auto_flag
}


install_usage()
{
  printf "%b" "
  Usage:

    ${0} [options]

  options:

    --auto    : Automatically update shell profile files.

    --path    : Installation directory (rvm_path).

    --help    : Display help/usage (this) message

    --version : display rvm package version

"
}

display_thank_you()
{
  printf "%b" "
# ${name:-"${USER:-$(id | sed -e 's/^[^(]*(//' -e 's/).*$//')}"},
#
#   Thank you for using RVM!
#   I sincerely hope that RVM helps to make your life easier and more enjoyable!!!
#
# ~Wayne

"
}

determine_install_path()
{
  export HOME="${HOME%%+(\/)}" # Remove trailing slashes if they exist on HOME

  if [[ -z "${rvm_path:-}" ]]
  then
    if (( UID == 0 ))
    then
      rvm_path="/usr/local/rvm"
    else
      rvm_path="${HOME}/.rvm"
    fi
  fi
  export rvm_path
}

determine_install_or_upgrade()
{
  export upgrade_flag
  if [[ -d "$rvm_path" && -s "${rvm_path}/scripts/rvm" ]]
  then upgrade_flag=1
  else upgrade_flag=0
  fi
}

print_install_header()
{
  if [[ ${upgrade_flag:-0} -eq 1 ]]
  then
    printf "%b" "\nUpgrading the RVM installation in $rvm_path/\n"
  else
    printf "%b" "\nInstalling RVM to $rvm_path/\n"
  fi
}

configure_installation()
{
  typeset save_rvm_without_gems
  install_source_path="$(dirname "$0" | sed 's#\/scripts$##')"

  if [[ -d "$install_source_path/scripts" \
    && -s "$install_source_path/scripts/functions/utility" ]]
  then
    builtin cd "$install_source_path"
  fi

  # Save scripts path
  scripts_path=${rvm_scripts_path:-""}
  rvm_scripts_path="${PWD%%+(\/)}/scripts"
  save_rvm_without_gems="${rvm_without_gems:-}"

  # Load scripts.
  source "$PWD/scripts/initialize"
  source "$PWD/scripts/functions/init"
  source "$PWD/scripts/version"
  __rvm_initialize

  # Restore Scripts Path
  rvm_scripts_path=${scripts_path:-"$rvm_path/scripts"}
  rvm_without_gems="${save_rvm_without_gems:-${rvm_without_gems}}"

  item="* "
  question="\n<?>"
  cwd="${PWD%%+(\/)}"

  true "${source_path:=$cwd}"

  return 0
}

create_install_paths()
{
  install_paths=(
  archives src log bin gems man rubies config
  user tmp gems environments wrappers
  )
  for install_path in "${install_paths[@]}"
  do
    if [[ ! -d "$rvm_path/$install_path" ]]
    then
      mkdir -p "$rvm_path/$install_path"
    fi
  done

  if [[ "$rvm_bin_path" != "" ]]
  then
    if [[ ! -d "$rvm_bin_path" ]]
    then
      mkdir -p "$rvm_bin_path"
    fi
  fi
  return 0
}

cleanse_old_entities()
{
  #
  # Remove old files that no longer exist.
  #
  for script in utility array ; do
    if [[ -f "$rvm_path/scripts/${script}" ]]
    then
      rm -f "$rvm_path/scripts/${script}"
    fi
  done
  return 0
}

install_rvm_files()
{
  files=(README LICENCE VERSION)
  for file in "${files[@]}"
  do
    cp -f "$source_path/${file}" "$rvm_path/${file}"
  done

  directories=(config contrib scripts examples lib help patches)

  for directory in ${directories[@]}
  do
    for entry in $(find $directory 2>/dev/null)
    do
      if [[ -f "$source_path/$entry" ]]
      then
        # Target is supposed to be a file, remove if it is a directory.
        if [[ -d "$rvm_path/$entry" ]]
        then
          __rvm_rm_rf "$rvm_path/$entry"
        fi
        cp -f "$source_path/$entry" "$rvm_path/$entry"
      elif [[ -d "$source_path/$entry" ]]
      then
        # Target is supposed to be a directory, remove if it is a file.
        if [[ -f "$rvm_path/$entry" ]]
        then
          rm -f "$rvm_path/$entry"
        fi
        if [[ ! -d "$rvm_path/$entry" ]]
        then
          mkdir -p "$rvm_path/$entry"
        fi
      fi
    done
  done

  return 0
}

install_rvm_hooks()
{
  typeset hook_x_flag entry
  for entry in $(find hooks 2>/dev/null)
  do
    if [[ -f "$source_path/$entry" ]]
    then
      # Target is supposed to be a file, remove if it is a directory.
      if [[ -d "$rvm_path/$entry" ]]
      then
        __rvm_rm_rf "$rvm_path/$entry"
      fi
      # Source is first level hook (after_use) and target is custom user hook, preserve it
      if echo "$entry" | GREP_OPTIONS="" \grep -E '^hooks/[[:alpha:]]+_[[:alpha:]]+$' >/dev/null &&
        [[ -f "$rvm_path/$entry" ]] &&
        ! GREP_OPTIONS="" \grep "$(basename ${entry})_\*" "$rvm_path/$entry" >/dev/null
      then
        mv -f "$rvm_path/$entry" "$rvm_path/${entry}_custom"
      fi
      if [[ -x "$rvm_path/$entry" ]]
      then hook_x_flag=$?
      else hook_x_flag=$?
      fi
      cp -f "$source_path/$entry" "$rvm_path/$entry"
      if (( hook_x_flag == 0 ))
      then
        [[ -x "$rvm_path/$entry" ]] || chmod +x "$rvm_path/$entry"
      fi
    elif [[ -d "$source_path/$entry" ]]
    then
      # Target is supposed to be a directory, remove if it is a file.
      if [[ -f "$rvm_path/$entry" ]]
      then
        rm -f "$rvm_path/$entry"
      fi
      if [[ ! -d "$rvm_path/$entry" ]]
      then
        mkdir -p "$rvm_path/$entry"
      fi
    fi
  done

  #fix broken copy of after_use to after_use_custom
  if [[ -f "$rvm_path/hooks/after_use_custom" ]] &&
    GREP_OPTIONS="" \grep "after_use_\*" "$rvm_path/hooks/after_use_custom" >/dev/null
  then
    rm -f "$rvm_path/hooks/after_use_custom"
  fi

  return 0
}

setup_configuration_files()
{
  pushd "$rvm_path" >/dev/null

  if [[ -f config/user ]]
  then
    mv config/user user/db
  fi

  if [[ -f config/installs ]]
  then
    mv config/installs user/installs
  fi

  if [[ ! -s user/db ]]
  then
    echo '# User settings, overrides db settings and persists across installs.' \
      >> user/db
  fi

  if [[ -s config/rvmrcs ]]
  then
    mv config/rvmrcs user/rvmrcs
  else
    [[ -f user/rvmrcs ]] || touch user/rvmrcs
  fi

  [[ -f user/md5 ]]    || touch user/md5
  [[ -f user/sha512 ]] || touch user/sha512

  # Prune old (keyed-by-hash) trust entries
  GREP_OPTIONS="" \grep '^_' user/rvmrcs > user/rvmrcs.new || true
  mv user/rvmrcs.new user/rvmrcs

  popd >/dev/null
}

ensure_scripts_are_executable()
{
  scripts=(monitor match log install db fetch log set package)

  for script_name in "${scripts[@]}"
  do
    if [[ -s "$rvm_scripts_path/$script_name" && ! -x "$rvm_scripts_path/$script_name" ]]
    then
      chmod +x "$rvm_scripts_path/$script_name"
    fi
  done
  return 0
}

install_binscripts()
{
  typeset -a files
  typeset system_bin
  files=(rvm-prompt rvm-installer rvm rvmsudo rvm-shell rvm-smile rvm-exec rvm-auto-ruby)

  [[ -d "${rvm_bin_path}" ]] || mkdir -p "${rvm_bin_path}"

  for file in "${files[@]}"
  do
    # Ensure binscripts are always available in rvm_path/bin first.
    [[ -f "${rvm_bin_path}/${file}" ]] && rm -f "${rvm_bin_path}/${file}"

    cp -f "${source_path}/binscripts/${file}" "${rvm_bin_path}/${file}"

    [[ -x "${rvm_bin_path}/${file}" ]] || chmod +x "${rvm_bin_path}/${file}"

    # try to clean old installer files left in usual places added to PATH
    for system_bin in ~/bin /usr/local/bin
    do
      if [[ "${system_bin}" != "${rvm_bin_path}" && -x "${system_bin}/${file}" ]]
      then
        rm -f "${system_bin}/${file}" 2>/dev/null ||
          printf "!!! could not remove ${system_bin}/${file}, remove it manually with:
!!! > sudo rm -f ${system_bin}/${file}
"
      fi
    done
  done

  # optional binscripts
  for file in rake bundle
  do
    [[ -f "${rvm_bin_path}/${file}" ]] ||
      cp -f "${source_path}/binscripts/${file}" "${rvm_bin_path}/${file}"
  done

  return 0
}

install_gemsets()
{
  typeset gemset_files

  if [[ ${rvm_keep_gemset_defaults_flag:-0} == 0 && -d "$rvm_path/gemsets" ]]
  then
    rm -rf "$rvm_path/gemsets"
  fi

  if [[ -d gemsets/ ]]
  then
    [[ -d "$rvm_path/gemsets" ]] || mkdir -p "$rvm_path/gemsets"

    gemset_files=($(
      find "${PWD%%+(\/)}/gemsets" "${name_opt}" '*.gems' | sed 's/^\.\///'
    ))

    for gemset_file in "${gemset_files[@]}"
    do
      cwd="${PWD//\//\\/}\/gemsets\/"
      destination="$rvm_path/gemsets/${gemset_file/$cwd}"
      if [[ ! -s "$destination" ]]
      then
        destination_path="${destination%/*}"
        [[ -d "$destination_path" ]] || mkdir -p "$destination_path"
        if
          [[ -n "${rvm_without_gems:-}" ]]
        then
          sed -E '/^('"${rvm_without_gems// /|}"')/ d' < "$gemset_file" > "$destination"
        else
          cp "$gemset_file" "$destination"
        fi
      fi
    done
  fi

  if [[ -n "${rvm_without_gems:-}" ]]
  then
    if GREP_OPTIONS="" \grep "rvm_without_gems=" ~/.rvmrc >/dev/null
    then
      __rvm_sed_i ~/.rvmrc -e 's/^rvm_without_gems=.*$/rvm_without_gems="'"${rvm_without_gems}"'"/'
    else
      echo "rvm_without_gems=\"${rvm_without_gems}\"" >> ~/.rvmrc
    fi
  fi
}

update_gemsets_install_rvm()
{
  typeset paths path installed found missing
  typeset -a missing

  if [[ ${rvm_keep_gemset_defaults_flag:-0} == 0 ]] &&
    ! [[ " ${rvm_without_gems:-} " =~ " rvm " ]]
  then
    # rvm /gems
    paths=($(
      find "$rvm_path/gems" -maxdepth 1 "${name_opt}" '*@global' | sed 's/^\.\///'
    ))

    for path in "${paths[@]}"
    do
      # skip unless this ruby is installed
      installed="${path%@global}"
      installed="${installed/\/gems\//\/rubies\//}/bin/ruby"
      installed=${installed//\\/}
      [[ -x "$installed" ]] || continue

      # rvm /gems @global /gems
      found=($(
        find "${path%%+(\/)}/gems" -maxdepth 1 "${name_opt}" 'rvm-*' | sed 's/^\.\///'
      ))
      (( ${#found[@]} > 0 )) || missing+=( "$path" )
    done

    if (( ${#missing[@]} > 0 ))
    then
      printf "    Installing rvm gem in ${#missing[@]} gemsets "
      for path in "${missing[@]}"
      do
        rvm "${path##*/}" do gem install rvm | awk '{printf "."}'
      done
      printf "\n"
    fi
  fi
}

install_patchsets()
{
  if [[ ${rvm_keep_patchsets_flag:-0} == 0 && -d "$rvm_path/patchsets" ]]
  then
    rm -rf "$rvm_path/patchsets"
  fi

  if [[ -d patchsets/ ]]
  then
    [[ -d "$rvm_path/patchsets" ]] || mkdir -p "$rvm_path/patchsets"

    patchsets=($(
      builtin cd patchsets
      find \. -type f "${name_opt}" '*' | sed 's/^\.\///'
    ))

    for patchset_file in "${patchsets[@]}"
    do
      destination="$rvm_path/patchsets/$patchset_file"
      if [[ ! -s "$destination" || "${patchset_file##*/}" == "default" ]]
      then
        destination_path="${destination%/*}"
        [[ -d "$destination_path" ]] || mkdir -p "$destination_path"
        [[ -f "$destination"      ]] && rm -f "$destination"
        cp "patchsets/$patchset_file" "$destination"
      fi
    done

  fi
}

cleanse_old_environments()
{
  if [[ -d "$rvm_path/environments" ]]
  then
    # Remove BUNDLE_PATH from environment files
    environments=($(
    find "$rvm_path/environments/" -maxdepth 1 -mindepth 1 -type f
    ))

    if (( ${#environments[@]} > 0 ))
    then
      for file in "${environments[@]}"
      do
        if GREP_OPTIONS="" \grep 'BUNDLE_PATH' "$file" > /dev/null 2>&1
        then
          GREP_OPTIONS="" \grep -v 'BUNDLE_PATH' "$file" > "$file.new"
          mv "$file.new" "$file"
        fi
      done
    fi
  fi
}

migrate_old_gemsets()
{
  for gemset in "$rvm_path"/gems/*\%*
  do
    new_path=${gemset/\%/${rvm_gemset_separator:-"@"}}

    if [[ -d "$gemset" ]] && [[ ! -d "$new_path" ]]
    then
      printf "%b" "\n    Renaming $(basename "$gemset") to $(basename "$new_path") for new gemset separator."
      mv "$gemset" "$new_path"
    fi
  done

  for gemset in "$rvm_path"/gems/*\+*
  do
    new_path=${gemset/\+/${rvm_gemset_separator:-"@"}}

    if [[ -d "$gemset" && ! -d "$new_path" ]]
    then
      printf "%b" "\n    Renaming $(basename "$gemset") to $(basename "$new_path") for new gemset separator."
      mv $gemset $new_path
    fi
  done

  for gemset in "$rvm_path"/gems/*\@
  do
    new_path=$(echo $gemset | sed -e 's#\@$##')

    if [[ -d "$gemset" && ! -d "$new_path" ]]
    then
      printf "%b" "\n    Fixing: $(basename "$gemset") to $(basename "$new_path") for new gemset separator."
      mv "$gemset" "$new_path"
    fi
  done
}

migrate_defaults()
{
  # Move from legacy defaults to the new, alias based system.
  if [[ -s "$rvm_path/config/default" ]]
  then
    original_version="$(basename "$(GREP_OPTIONS="" \grep GEM_HOME "$rvm_path/config/default" \
      | awk -F"'" '{print $2}' | sed "s#\%#${rvm_gemset_separator:-"@"}#")")"

    if [[ -n "$original_version" ]]
    then
      "$rvm_scripts_path/alias" create default "$original_version" &> /dev/null
    fi
    unset original_version
    __rvm_rm_rf "$rvm_path/config/default"
  fi
}

correct_binary_permissions()
{
  typeset -a files

  mkdir -p "${rvm_bin_path}"

  files=(rvm rvmsudo rvm-shell rvm-auto-ruby)
  for file in "${files[@]}"
  do
    if [[ -s "${rvm_bin_path}/${file}" && ! -x "${rvm_bin_path}/${file}" ]]
    then
      chmod +x "${rvm_bin_path}/${file}"
    fi
  done

  files=(
  manage alias cleanup current db disk-usage docs env
  fetch gemsets get hash help hook info install list maglev match migrate
  monitor notes override_gem package patchsets repair rtfm rubygems rvm selector
  selector_gemsets set snapshot tools upgrade wrapper
  )
  for file in "${files[@]}"
  do
    if [[ -s "${rvm_scripts_path}/${file}" && ! -x "${rvm_scripts_path}/${file}" ]]
    then
      chmod +x "${rvm_scripts_path}/${file}"
    fi
  done
}

get_file_group()
{
  case "$(uname)" in
    "Darwin") stat -f "%Sg" "$1" ;;
    "OpenBSD") stat -f "%Sg" "$1" ;;
    *)        stat -c "%G"  "$1" ;;
  esac
}

is_file_group() [[ "$(get_file_group "$1")" == "$2" ]]

install_man_pages()
{
  files=($(
  builtin cd "$install_source_path/man"
  find . -maxdepth 2 -mindepth 1 -type f -print
  ))

  for file in "${files[@]//.\/}"
  do
    if [[ ! -d $rvm_man_path/${file%\/*} ]]
    then
      mkdir -p $rvm_man_path/${file%\/*}
      (( ${rvm_user_install_flag:-0} == 1 )) ||
        is_file_group $rvm_man_path/${file%\/*} $rvm_group_name ||
        chown :$rvm_group_name $rvm_man_path/${file%\/*}
    fi
    cp -Rf "$install_source_path/man/$file" "$rvm_man_path/$file" || \
      printf "%b" "

    Please run the installer using rvmsudo to fix file permissions

"
    (( ${rvm_user_install_flag:-0} == 1 )) ||
      is_file_group "$rvm_man_path/$file" $rvm_group_name ||
      chown :$rvm_group_name "$rvm_man_path/$file"
  done
}

cleanup_tmp_files()
{
  files=($(
  find "$rvm_path/" -mindepth 1 -maxdepth 2 "${name_opt}" '*.swp' -type f
  ))
  if (( ${#files[@]} > 0 ))
  then
    printf "%b" "\n    Cleanup any .swp files."
    for file in "${files[@]}"
    do
      if [[ -f "$file" ]]
      then
        rm -f "$file"
      fi
    done
  fi
}

display_notes()
{
  true ${upgrade_flag:=0}
  typeset itype profile_file

  if (( upgrade_flag == 0 ))
  then itype=Installation
  else itype=Upgrade
  fi

  if builtin command -v git > /dev/null 2>&1
  then name="$(git config user.name 2>/dev/null || echo ${SUDO_USER:-${USERNAME}} )"
  fi

  [[ -x ./scripts/notes ]] || chmod +x ./scripts/notes
  if (( upgrade_flag == 0 ))
  then
    ./scripts/notes initial
  else
    ./scripts/notes upgrade
  fi

  if (( upgrade_flag == 0 ))
  then
    profile_file="${user_profile_file:-${etc_profile_file:-$rvm_path/scripts/rvm}}"
    printf "%b" "$itype of RVM in $rvm_path/ is almost complete:
"
    if (( ${rvm_user_install_flag:=0} == 0 ))
    then
      printf "%b" "
  * First you need to add all users that will be using rvm to '${rvm_group_name}' group,
    and logout - login again, anyone using rvm will be operating with \`umask g+w\`.
"
    fi
    printf "%b" "
  * To start using RVM you need to run \`source ${profile_file}\`
    in all your open shell windows, in rare cases you need to reopen all shell windows.
"
  else
    printf "%b" "$itype of RVM in $rvm_path/ is complete.
"
  fi
}

#
# root install functions.
#
setup_rvm_path_permissions()
{
  chown -R root:"$rvm_group_name" "$rvm_path"

  chmod -R g+w "$rvm_path"

  if [[ -d "$rvm_path" ]]
  then
    find "$rvm_path" -type d -print0 | xargs -n1 -0 chmod g+s
  fi
  return 0
}

setup_rvm_group()
{
  typeset __group_params
  __group_params=""
  if [[ -n "${rvm_group_id}" ]]
  then __group_params="${__group_params} -g ${rvm_group_id}"
  fi

  if [[ -n "$ZSH_VERSION" ]]
  then __group_params=( ${=__group_params} )
  else __group_params=( ${__group_params} )
  fi

  if GREP_OPTIONS="" \grep "$rvm_group_name" /etc/group >/dev/null 2>&1
  then
    echo "    RVM system user group '$rvm_group_name' exists, proceeding with installation."
  else
    echo "    Creating RVM system user group '$rvm_group_name'"

    case "$(uname)" in
      "OpenBSD")
        groupadd ${__group_params[@]} "$rvm_group_name"
        ;;
      "FreeBSD")
        pw groupadd ${__group_params[@]} "$rvm_group_name" -q
        ;;
      "Linux")
        if [[ -f "/etc/SuSE-release" ]]
        then
          groupadd ${__group_params[@]} "$rvm_group_name"
        else
          groupadd -f ${__group_params[@]} "$rvm_group_name"
        fi
        ;;
      "Darwin")
        if ! dscl . -read "/Groups/$rvm_group_name" 1>/dev/null 2>&1
        then
          if [[ -n "${rvm_group_id}" ]]
          then
            __group_params="${rvm_group_id}"
          else
            __group_params="501" #only gids > 500 show up in user preferences
            #Find an open gid
            while true
            do
              name=$(dscl . search /groups PrimaryGroupID ${__group_params} | cut -f1 -s)
              if [[ -z "$name" ]]
              then break
              fi
              __group_params=$(( __group_params + 1 ))
            done
          fi
          # Create the group, isn't OSX "fun"?! :)
          # Thanks for the assist frogor of ##osx-server on freenode! Appreciate the assist!
          dscl . -create "/Groups/$rvm_group_name" gid "${__group_params}"
        fi
        ;;
      "SunOS")
        groupadd ${__group_params[@]} "$rvm_group_name"
        ;;
    esac
  fi

  return 0
}

system_check()
{
  typeset os
  os=$(uname)
  case "$os" in
    OpenBSD|Linux|FreeBSD|Darwin|SunOS)
      return 0 # Accounted for, continue.
    ;;
    *)
      printf "%b" "Installing RVM as root is currently only supported on the following known OS's (uname):\n  Linux, FreeBSD, OpenBSD, Darwin and SunOS\nWhereas your OS is reported as '$os'" >&2
      return 1
    ;;
  esac
}

setup_etc_profile()
{
  export etc_profile_file
  if (( ${rvm_etc_profile_flag:-1} == 0 ))
  then return 0 ; fi # opt-out

  typeset executable add_to_profile_flag zshrc_file
  executable=0
  add_to_profile_flag=0
  etc_profile_file="/etc/profile.d/rvm.sh"

  if [[ -d /etc/profile.d ]]
  then
    executable=1
  else
    mkdir -p /etc/profile.d
    add_to_profile_flag=1
    executable=0
  fi

  if ! [[ -s "${etc_profile_file}" ]] || (( ${rvm_auto_flag:-0} == 1 ))
  then
    printf "%b" "#
# RVM profile
#
# /etc/profile.d/rvm.sh # sh extension required for loading.
#


if test -d /proc
then
    shell=\$(basename \$(readlink -f /proc/\$\$/exe))
else
    shell=\"\`ps -p \$\$ -o comm=\`\"
fi
if [ -n \"\${BASH_VERSION:-}\" -o -n \"\${ZSH_VERSION:-}\" ] &&
  test \"\$shell\" != dash &&
  test \"\$shell\" != sh
then

  : rvm_stored_umask:\${rvm_stored_umask:=\$(umask)}
  # Load user rvmrc configurations, if exist
  for file in \"/etc/rvmrc\" \"\$HOME/.rvmrc\" ; do
    [[ -s \"\$file\" ]] && source \$file
  done
  if [[ -n \"\${rvm_prefix:-}\" ]] && ! [[ \"\$HOME/.rvmrc\" -ef \"\${rvm_prefix}/.rvmrc\" ]] && [[ -s \"\${rvm_prefix}/.rvmrc\" ]]
  then source \"\${rvm_prefix}/.rvmrc\"
  fi

  # Load RVM if it is installed, try user then root install.
  if [[ -s \"\$rvm_path/scripts/rvm\" ]] ; then
    source \"\$rvm_path/scripts/rvm\"

  elif [[ -s \"\$HOME/.rvm/scripts/rvm\" ]] ; then
    true \${rvm_path:=\"\$HOME/.rvm\"}
    source \"\$HOME/.rvm/scripts/rvm\"

  elif [[ -s \"/usr/local/rvm/scripts/rvm\" ]] ; then
    true \${rvm_path:=\"/usr/local/rvm\"}
    source \"/usr/local/rvm/scripts/rvm\"
  fi

  #
  # Opt-in for custom prompt through by setting:
  #
  #   rvm_ps1=1
  #
  # in either /etc/rvmrc or \$HOME/.rvmrc
  #
  if [[ \${rvm_ps1:-0} -eq 1 ]] ; then
    # Source RVM ps1 functions for a great prompt.
    if [[ -s \"\$rvm_path/contrib/ps1_functions\" ]] ; then
      source \"\$rvm_path/contrib/ps1_functions\"
    elif [[ -s \"/usr/local/rvm/contrib/ps1_functions\" ]] ; then
      source \"/usr/local/rvm/contrib/ps1_functions\"
    fi

    if command -v ps1_set >/dev/null 2>&1 ; then
      ps1_set
    fi
  fi

  # Add \$rvm_bin_path to \$PATH if necessary
  if [[ \"\${rvm_bin_path}\" != \"\${rvm_path}/bin\" ]] ; then
    regex=\"^([^:]*:)*\${rvm_bin_path}(:[^:]*)*\$\"
    if [[ ! \"\${PATH}\" =~ \$regex ]] ; then
      __rvm_add_to_path prepend \"\${rvm_bin_path}\"
    fi
  fi
fi
" > "${etc_profile_file}"

    if (( executable )) && [[ ! -x "${etc_profile_file}" ]]
    then
      chmod +x "${etc_profile_file}"
    fi

    if (( add_to_profile_flag )) &&
      ! GREP_OPTIONS="" \grep "source ${etc_profile_file}" /etc/profile >/dev/null 2>&1
    then
      printf "%b" "\nsource ${etc_profile_file}\n" >> /etc/profile
    fi

    for zshrc_file in $(
      find /etc/ -name zprofile -type f 2>/dev/null ;
      find /etc/ -name zlogin   -type f 2>/dev/null ;
      true ) /etc/zprofile
    do
      if
        [[ ! -f "${zshrc_file}" ]]
      then
        printf "%b" "\nsource ${etc_profile_file}\n" > $zshrc_file
      elif
        ! GREP_OPTIONS="" \grep "source /etc/bash"    "${zshrc_file}" &&
        ! GREP_OPTIONS="" \grep "source /etc/profile" "${zshrc_file}"
      then
        printf "%b" "\nsource ${etc_profile_file}\n" >> $zshrc_file
      fi
      break # process only first file found
    done
  fi
  return 0
}

setup_rvmrc()
{
  if (( UID == 0 ))
  then
    rvmrc_file="/etc/rvmrc"
    if ! GREP_OPTIONS="" \grep 'umask g+w' $rvmrc_file >/dev/null 2>&1
    then
      echo 'umask g+w' >> $rvmrc_file
    fi

    if [[ -s $rvmrc_file ]]
    then
      chown $USER:${rvm_group_name:-$USER} $rvmrc_file
    fi
  else
    rvmrc_file="$HOME/.rvmrc"
  fi

  return 0
}

pick_a_file()
{
  typeset _file _result
  _result=$1
  shift
  for _file
  do
    if
      [[ -f "$_file" ]]
    then
      eval "${_result}+=( \"\$_file\" )"
      return 0
    fi
  done
  eval "${_result}+=( \"\$1\" )"
}

setup_user_profile()
{
  (( UID > 0 )) || return 0
  [[ "${rvm_ignore_dotfiles:-no}" == "no" ]] || return 0

  export user_profile_file
  export -a user_login_files user_rc_files
  typeset -a search_list target_rc target_login found_rc found_login
  typeset etc_profile_file profile_file

  etc_profile_file="/etc/profile.d/rvm.sh"
  search_list=(
    ~/.profile
    ~/.bashrc ~/.bash_profile ~/.bash_login
    ~/.zshenv ~/.zprofile ~/.zshrc ~/.zlogin
  )

  target_rc=( ~/.bashrc )
  pick_a_file target_rc    ~/.zshenv       ~/.zshrc

  target_login=()
  pick_a_file target_login ~/.bash_profile ~/.bash_login
  pick_a_file target_login ~/.zprofile     ~/.zlogin

  for profile_file in ${search_list[@]}
  do
    [[ -f $profile_file ]] &&
      GREP_OPTIONS="" \grep PATH=.*\$HOME/.rvm/bin $profile_file >/dev/null &&
      found_rc+=( $profile_file ) || true

    [[ -f $profile_file ]] && { {
        GREP_OPTIONS="" \grep \..*scripts/rvm $profile_file >/dev/null &&
        found_login+=( $profile_file )
      } || {
        GREP_OPTIONS="" \grep source.*scripts/rvm $profile_file >/dev/null &&
        found_login+=( $profile_file )
      } } || true
  done

  if (( rvm_auto_flag == 1 && ${#found_rc[@]} > 0 ))
  then
    printf "%b" "    Removing rvm PATH line from ${found_rc[*]}.\n"
    for profile_file in ${found_rc[@]}
    do
      __rvm_sed_i "${profile_file}" -e '/PATH=.*\$HOME\/.rvm\/bin/ d;'
      # also delete duplicate blank lines
      __rvm_sed_i "${profile_file}" -e '/^\s*$/{ N; /^\n$/ D; };'
    done
    found_rc=()
  fi
  if (( rvm_auto_flag == 1 || ${#found_rc[@]} == 0 ))
  then
    printf "%b" "    Adding rvm PATH line to ${target_rc[*]}.\n"
    for profile_file in ${target_rc[@]}
    do
      touch $profile_file
      printf "%b" "
PATH=\$PATH:\$HOME/.rvm/bin # Add RVM to PATH for scripting
" >> $profile_file
    done
    user_rc_files=( ${target_rc[@]} )
  else
    printf "%b" "    RVM PATH line found in ${found_rc[*]}.\n"
    user_rc_files=( ${found_rc[@]} )
  fi

  if (( rvm_auto_flag == 1 && ${#found_login[@]} > 0 ))
  then
    printf "%b" "    Removing rvm loading line from ${found_login[*]}.\n"
    for profile_file in ${found_login[@]}
    do
      __rvm_sed_i "${profile_file}" -e '/source.*scripts\/rvm/ d; /\. .*scripts\/rvm/ d;'
      # also delete duplicate blank lines
      __rvm_sed_i "${profile_file}" -e '/^\s*$/{ N; /^\n$/ D; };'
    done
    found_rc=()
  fi
  if (( rvm_auto_flag == 1 || ${#found_login[@]} == 0 ))
  then
    printf "%b" "    Adding rvm loading line to ${target_login[*]}.\n"
    for profile_file in ${target_login[@]}
    do
      touch $profile_file
    printf "%b" "
[[ -s \"\$HOME/.rvm/scripts/rvm\" ]] && source \"\$HOME/.rvm/scripts/rvm\" # Load RVM into a shell session *as a function*
" >> $profile_file
    done
    user_login_files=( ${target_login[@]} )
  else
    printf "%b" "    RVM sourcing line found in ${found_login[*]}.\n"
    user_login_files=( ${found_login[@]} )
  fi

  return 0
}

root_canal()
{
  if (( UID == 0 )) && system_check
  then
    setup_rvm_group
    setup_etc_profile
    setup_rvm_path_permissions
  fi

  return 0
}

record_ruby_configs()
{
  source "$PWD/scripts/functions/manage/base"
  __rvm_record_ruby_configs
}

record_installation_time()
{
  date +%s > $rvm_path/installed.at
  if (( UID == 0 )) && system_check
  then
    # fix the rights explicitly as this is the last action
    chmod g+w "$rvm_path/installed.at"
  fi
  return 0
}
